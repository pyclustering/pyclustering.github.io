<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>citelist</Name>
      <APILanguage>unknown</APILanguage>
    </TokenIdentifier>
    <Path>d0/de3/citelist.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering</Scope>
    </TokenIdentifier>
    <Path>de/da1/namespacepyclustering.html</Path>
    <Abstract>PyClustering module that consists of general modules related to clustering, graph coloring...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster</Scope>
    </TokenIdentifier>
    <Path>d1/d2a/namespacepyclustering_1_1cluster.html</Path>
    <Abstract>pyclustering module for cluster analysis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::canvas_cluster_descr</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Abstract>Description of cluster for representation on canvas. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Anchor>a9e82d8a716fd1898a7870bc4ef2d9a39</Anchor>
    <Abstract>Constructor of cluster representation on the canvas. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Anchor>a7716afc8a32a4aab5d2bc8b5ce7cbb2c</Anchor>
    <Abstract>Cluster that may consist of objects or indexes of objects from data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Anchor>acd8c34c3e85bdafe520d4ee93f27c762</Anchor>
    <Abstract>Data where objects are stored. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marker</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Anchor>aa43ea97303cbf10bbbc28a55ed7a8942</Anchor>
    <Abstract>Marker that is used for drawing objects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>markersize</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Anchor>afb93ac2ac2304150e6465c6be83e6e02</Anchor>
    <Abstract>Size of marker that is used for drawing objects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>color</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Anchor>a5f1a2d69dd9ff03a1924e3ea49a5a3ec</Anchor>
    <Abstract>Color that is used for coloring marker. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>attributes</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.canvas_cluster_descr</Scope>
    </TokenIdentifier>
    <Path>d8/d69/classpyclustering_1_1cluster_1_1canvas__cluster__descr.html</Path>
    <Anchor>a10f870f1cc1ed0196d3bb74f764f4787</Anchor>
    <Abstract>Attribures of the clusters - additional collections of data points that are regarded to the cluster...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::cluster_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Abstract>Common visualizer of clusters on 1D, 2D or 3D surface. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Anchor>a18b8c55ba62f0e01c4950be1992eb117</Anchor>
    <Abstract>Constructor of cluster visualizer. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append_cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Anchor>a6f9a8fdd26d710f0b91625f8bb2475ad</Anchor>
    <Abstract>Appends cluster to canvas for drawing. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append_cluster_attribute</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Anchor>adfa7a592200be762e53688703382af40</Anchor>
    <Abstract>Append cluster attribure for cluster on specific canvas. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Anchor>a43824185e44113cae94fec8ce97344e4</Anchor>
    <Abstract>Appends list of cluster to canvas for drawing. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_canvas_title</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Anchor>a5f956a5bf536d49b73e0d438bc8502ef</Anchor>
    <Abstract>Set title for specified canvas. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_color</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Anchor>a3aefa668cd958fdabf6fa63bfe319017</Anchor>
    <Abstract>Returns cluster color on specified canvas. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/def/classpyclustering_1_1cluster_1_1cluster__visualizer.html</Path>
    <Anchor>a5f649e4da29f2a99bd727755914d4180</Anchor>
    <Abstract>Shows clusters (visualize). </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::cluster_visualizer_multidim</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.cluster_visualizer_multidim</Scope>
    </TokenIdentifier>
    <Path>dc/d6b/classpyclustering_1_1cluster_1_1cluster__visualizer__multidim.html</Path>
    <Abstract>Visualizer for cluster in multi-dimensional data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer_multidim</Scope>
    </TokenIdentifier>
    <Path>dc/d6b/classpyclustering_1_1cluster_1_1cluster__visualizer__multidim.html</Path>
    <Anchor>aa7c2f4794ce1dd795df7526cab8fbc3e</Anchor>
    <Abstract>Constructs cluster visualizer for multidimensional data. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append_cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer_multidim</Scope>
    </TokenIdentifier>
    <Path>dc/d6b/classpyclustering_1_1cluster_1_1cluster__visualizer__multidim.html</Path>
    <Anchor>ad49ff54989ca3184f5ed7b33d32818c7</Anchor>
    <Abstract>Appends cluster for visualization. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer_multidim</Scope>
    </TokenIdentifier>
    <Path>dc/d6b/classpyclustering_1_1cluster_1_1cluster__visualizer__multidim.html</Path>
    <Anchor>a8e58600af07885bc58d935a55f2a7d8e</Anchor>
    <Abstract>Appends list of cluster for visualization. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cluster_visualizer_multidim</Scope>
    </TokenIdentifier>
    <Path>dc/d6b/classpyclustering_1_1cluster_1_1cluster__visualizer__multidim.html</Path>
    <Anchor>a4b0d2c7e40ba3f44bb2d1a523ea72bf5</Anchor>
    <Abstract>Shows clusters (visualize) in multi-dimensional space. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::agglomerative</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::agglomerative</Scope>
    </TokenIdentifier>
    <Path>d5/d2d/namespacepyclustering_1_1cluster_1_1agglomerative.html</Path>
    <Abstract>Cluster analysis algorithm: agglomerative algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::agglomerative::agglomerative</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.agglomerative.agglomerative</Scope>
    </TokenIdentifier>
    <Path>d4/d81/classpyclustering_1_1cluster_1_1agglomerative_1_1agglomerative.html</Path>
    <Abstract>Class represents agglomerative algorithm for cluster analysis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.agglomerative.agglomerative</Scope>
    </TokenIdentifier>
    <Path>d4/d81/classpyclustering_1_1cluster_1_1agglomerative_1_1agglomerative.html</Path>
    <Anchor>a387ae5db58da7cec74204aa94f7e9923</Anchor>
    <Abstract>Constructor of agglomerative hierarchical algorithm. </Abstract>
    <DeclaredIn>agglomerative.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.agglomerative.agglomerative</Scope>
    </TokenIdentifier>
    <Path>d4/d81/classpyclustering_1_1cluster_1_1agglomerative_1_1agglomerative.html</Path>
    <Anchor>a1fe2a8d6ac9abbb025af97d948b507dc</Anchor>
    <Abstract>Performs cluster analysis in line with rules of agglomerative algorithm and similarity. </Abstract>
    <DeclaredIn>agglomerative.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.agglomerative.agglomerative</Scope>
    </TokenIdentifier>
    <Path>d4/d81/classpyclustering_1_1cluster_1_1agglomerative_1_1agglomerative.html</Path>
    <Anchor>ad5f29bf2bc58de54b7917a851e86d6ac</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>agglomerative.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.agglomerative.agglomerative</Scope>
    </TokenIdentifier>
    <Path>d4/d81/classpyclustering_1_1cluster_1_1agglomerative_1_1agglomerative.html</Path>
    <Anchor>a7f46e400e90dddffd4cb5412086b40d6</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>agglomerative.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::agglomerative::type_link</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.agglomerative.type_link</Scope>
    </TokenIdentifier>
    <Path>d5/d58/classpyclustering_1_1cluster_1_1agglomerative_1_1type__link.html</Path>
    <Abstract>Enumerator of types of link between clusters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SINGLE_LINK</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.agglomerative.type_link</Scope>
    </TokenIdentifier>
    <Path>d5/d58/classpyclustering_1_1cluster_1_1agglomerative_1_1type__link.html</Path>
    <Anchor>afdf03fba937c727c4ba692b828c8293d</Anchor>
    <Abstract>Distance between the two nearest objects in clusters is considered as a link, so-called SLINK method ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>COMPLETE_LINK</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.agglomerative.type_link</Scope>
    </TokenIdentifier>
    <Path>d5/d58/classpyclustering_1_1cluster_1_1agglomerative_1_1type__link.html</Path>
    <Anchor>a3917a6096348a64f29c0b8333d6cfec1</Anchor>
    <Abstract>Distance between the farthest objects in clusters is considered as a link, so-called CLINK method (th...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AVERAGE_LINK</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.agglomerative.type_link</Scope>
    </TokenIdentifier>
    <Path>d5/d58/classpyclustering_1_1cluster_1_1agglomerative_1_1type__link.html</Path>
    <Anchor>acb4095bde96c5880638402d2a23332b6</Anchor>
    <Abstract>Average distance between objects in clusters is considered as a link. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CENTROID_LINK</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.agglomerative.type_link</Scope>
    </TokenIdentifier>
    <Path>d5/d58/classpyclustering_1_1cluster_1_1agglomerative_1_1type__link.html</Path>
    <Anchor>a14d1c56f3599658d4a3834cf381fcab9</Anchor>
    <Abstract>Distance between centers of clusters is considered as a link. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bang</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::bang</Scope>
    </TokenIdentifier>
    <Path>d5/dbf/namespacepyclustering_1_1cluster_1_1bang.html</Path>
    <Abstract>Cluster analysis algorithm: BANG. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bang::bang</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Abstract>Class implements BANG grid based clustering algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Anchor>a73196c298929ab84ec9b8f79b04d4307</Anchor>
    <Abstract>Create BANG clustering algorithm. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Anchor>aacc75bc3a8c460e61a6cfc7e396be848</Anchor>
    <Abstract>Performs clustering process in line with rules of BANG clustering algorithm. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Anchor>a03062608e07ffc5633ceb9afb8efd1c8</Anchor>
    <Abstract>Returns allocated clusters. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_noise</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Anchor>af53e5df6653e80a4b7c9830475508007</Anchor>
    <Abstract>Returns allocated noise. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_directory</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Anchor>aaf45d57edfa2527a77b5d5e8e114da1f</Anchor>
    <Abstract>Returns grid directory that describes grid of the processed data. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_dendrogram</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Anchor>a98dc753b2b118b5f94dc7e439ed0074f</Anchor>
    <Abstract>Returns dendrogram of clusters. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang</Scope>
    </TokenIdentifier>
    <Path>da/db0/classpyclustering_1_1cluster_1_1bang_1_1bang.html</Path>
    <Anchor>a4e2bdc42c555811d78fdf195ebd938fe</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bang::bang_animator</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bang.bang_animator</Scope>
    </TokenIdentifier>
    <Path>df/d88/classpyclustering_1_1cluster_1_1bang_1_1bang__animator.html</Path>
    <Abstract>Provides service for creating 2-D animation using BANG clustering results. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_animator</Scope>
    </TokenIdentifier>
    <Path>df/d88/classpyclustering_1_1cluster_1_1bang_1_1bang__animator.html</Path>
    <Anchor>a7a005dd497f44c0cd6bc7134364211c9</Anchor>
    <Abstract>Creates BANG animator instance. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_animator</Scope>
    </TokenIdentifier>
    <Path>df/d88/classpyclustering_1_1cluster_1_1bang_1_1bang__animator.html</Path>
    <Anchor>a6a62b35be5a5fdb704dcbd1e2ab15602</Anchor>
    <Abstract>Animates clustering process that is performed by BANG algorithm. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bang::bang_block</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Abstract>BANG-block that represent spatial region in data space. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>a89bac570bdd490bbec191926165adc33</Anchor>
    <Abstract>Create BANG-block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>a7a4c4905ea99313030954a73b37967ee</Anchor>
    <Abstract>Returns string representation of BANG-block using region number and level where block is located...</Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>a15819f822c2462375b997ee215481c3e</Anchor>
    <Abstract>Returns block size defined by amount of points that are contained by this block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_region</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>acaaa34ef74d6885bf9796a410b01071c</Anchor>
    <Abstract>Returns region number of BANG-block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_density</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>ab48674911b228346eee2a4d9f612abfb</Anchor>
    <Abstract>Returns density of the BANG-block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>a13b65d233962c12838fa6f81332f26b1</Anchor>
    <Abstract>Return index of cluster to which the BANG-block belongs to. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_spatial_block</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>ad85772088c28eda53b9bf60849601dd5</Anchor>
    <Abstract>Return spatial block - BANG-block description in data space. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_points</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>ad164f2ba351856f63586d2697bf78e0d</Anchor>
    <Abstract>Return points that covers by the BANG-block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>a2c92afe419f07fe801b543478f97b195</Anchor>
    <Abstract>Assign cluster to the BANG-block by index. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>is_neighbor</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>a95ec9ddf1ef44c324c523386b58978b0</Anchor>
    <Abstract>Performs calculation to check whether specified block is neighbor to the current. ...</Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>split</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_block</Scope>
    </TokenIdentifier>
    <Path>df/d92/classpyclustering_1_1cluster_1_1bang_1_1bang__block.html</Path>
    <Anchor>ae3baf0a728deb56303dc63c90640ef3f</Anchor>
    <Abstract>Split BANG-block into two new blocks in specified dimension. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bang::bang_directory</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bang.bang_directory</Scope>
    </TokenIdentifier>
    <Path>de/d23/classpyclustering_1_1cluster_1_1bang_1_1bang__directory.html</Path>
    <Abstract>BANG directory stores BANG-blocks that represents grid in data space. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_directory</Scope>
    </TokenIdentifier>
    <Path>de/d23/classpyclustering_1_1cluster_1_1bang_1_1bang__directory.html</Path>
    <Anchor>aca0603c108e48f3518c87c3a15c2a932</Anchor>
    <Abstract>Create BANG directory - basically tree structure with direct access to leafs. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_directory</Scope>
    </TokenIdentifier>
    <Path>de/d23/classpyclustering_1_1cluster_1_1bang_1_1bang__directory.html</Path>
    <Anchor>a0fe04be7c47d34f148f4520fa762143a</Anchor>
    <Abstract>Returns amount of blocks that is stored in the directory. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_data</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_directory</Scope>
    </TokenIdentifier>
    <Path>de/d23/classpyclustering_1_1cluster_1_1bang_1_1bang__directory.html</Path>
    <Anchor>a7a1d36aad19012b9f094eb67c3860a6d</Anchor>
    <Abstract>Return data that is stored in the directory. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_leafs</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_directory</Scope>
    </TokenIdentifier>
    <Path>de/d23/classpyclustering_1_1cluster_1_1bang_1_1bang__directory.html</Path>
    <Anchor>a5c8045acbc64dae7e156cb499a49dcf1</Anchor>
    <Abstract>Return leafs - the smallest blocks. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_level</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_directory</Scope>
    </TokenIdentifier>
    <Path>de/d23/classpyclustering_1_1cluster_1_1bang_1_1bang__directory.html</Path>
    <Anchor>a290c8a3d267353649f6a4b715abcc661</Anchor>
    <Abstract>Returns BANG blocks on the specific level. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.bang_directory</Scope>
    </TokenIdentifier>
    <Path>de/d23/classpyclustering_1_1cluster_1_1bang_1_1bang__directory.html</Path>
    <Anchor>ac39faca3000d4312b38702f9a06176f7</Anchor>
    <Abstract>Returns height of BANG tree where blocks are stored. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bang::bang_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bang.bang_visualizer</Scope>
    </TokenIdentifier>
    <Path>df/d4e/classpyclustering_1_1cluster_1_1bang_1_1bang__visualizer.html</Path>
    <Abstract>Visualizer of BANG algorithm&amp;#39;s results. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_blocks</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.bang.bang_visualizer</Scope>
    </TokenIdentifier>
    <Path>df/d4e/classpyclustering_1_1cluster_1_1bang_1_1bang__visualizer.html</Path>
    <Anchor>aa1dd1fa38e3f576bb4b28769c426e9e5</Anchor>
    <Abstract>Show BANG-blocks (leafs only) in data space. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_dendrogram</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.bang.bang_visualizer</Scope>
    </TokenIdentifier>
    <Path>df/d4e/classpyclustering_1_1cluster_1_1bang_1_1bang__visualizer.html</Path>
    <Anchor>a3ae9591f5095ba7deed3a015fb1828f9</Anchor>
    <Abstract>Display dendrogram of BANG-blocks. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.bang.bang_visualizer</Scope>
    </TokenIdentifier>
    <Path>df/d4e/classpyclustering_1_1cluster_1_1bang_1_1bang__visualizer.html</Path>
    <Anchor>a19011110f75324c054f84eed3e9b4841</Anchor>
    <Abstract>Display BANG clustering results. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bang::spatial_block</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Abstract>Geometrical description of BANG block in data space. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Anchor>a2b91d923932cb3b56e8e7316a653276b</Anchor>
    <Abstract>Creates spatial block in data space. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Anchor>ade604f41f013579c42a6fb7d8e05b159</Anchor>
    <Abstract>Returns string block description. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__contains__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Anchor>aa8d8f3255929b39a4b9e59709124bf61</Anchor>
    <Abstract>Point is considered as contained if it lies in block (belong to it). </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_corners</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Anchor>a6f61e106d0a6b51ec2fa2f49f89b7a03</Anchor>
    <Abstract>Return spatial description of current block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_volume</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Anchor>a197918a564bfc6de6b793f2d679c8278</Anchor>
    <Abstract>Returns volume of current block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>split</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Anchor>a63b53b70f1d4dea5f85068636be52433</Anchor>
    <Abstract>Split current block into two spatial blocks in specified dimension. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>is_neighbor</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bang.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d2f/classpyclustering_1_1cluster_1_1bang_1_1spatial__block.html</Path>
    <Anchor>a5657f30be3c4c1cf8b81897af7def3b8</Anchor>
    <Abstract>Performs calculation to identify whether specified block is neighbor of current block. </Abstract>
    <DeclaredIn>bang.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::birch</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::birch</Scope>
    </TokenIdentifier>
    <Path>dc/d83/namespacepyclustering_1_1cluster_1_1birch.html</Path>
    <Abstract>BIRCH (Balanced Iterative Reducing and Clustering using Hierarchies) cluster analysis algorithm...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::birch::birch</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.birch.birch</Scope>
    </TokenIdentifier>
    <Path>d6/d00/classpyclustering_1_1cluster_1_1birch_1_1birch.html</Path>
    <Abstract>Class represents the clustering algorithm BIRCH (Balanced Iterative Reducing and Clustering using Hie...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.birch.birch</Scope>
    </TokenIdentifier>
    <Path>d6/d00/classpyclustering_1_1cluster_1_1birch_1_1birch.html</Path>
    <Anchor>ad6ea62b2e0ab68541a9f42641f08bfac</Anchor>
    <Abstract>Constructor of clustering algorithm BIRCH. </Abstract>
    <DeclaredIn>birch.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.birch.birch</Scope>
    </TokenIdentifier>
    <Path>d6/d00/classpyclustering_1_1cluster_1_1birch_1_1birch.html</Path>
    <Anchor>a30e6406133b3a9b8af51dcaa1db66d94</Anchor>
    <Abstract>Performs cluster analysis in line with rules of BIRCH algorithm. </Abstract>
    <DeclaredIn>birch.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.birch.birch</Scope>
    </TokenIdentifier>
    <Path>d6/d00/classpyclustering_1_1cluster_1_1birch_1_1birch.html</Path>
    <Anchor>a0927246c207a26064455830b1e31f776</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster is represented by a list of indexes where each index...</Abstract>
    <DeclaredIn>birch.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cf_entries</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.birch.birch</Scope>
    </TokenIdentifier>
    <Path>d6/d00/classpyclustering_1_1cluster_1_1birch_1_1birch.html</Path>
    <Anchor>a43a9d81bbcd4b34e6595364c8bf3ce32</Anchor>
    <Abstract>Returns CF-entries that encodes an input dataset. </Abstract>
    <DeclaredIn>birch.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cf_cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.birch.birch</Scope>
    </TokenIdentifier>
    <Path>d6/d00/classpyclustering_1_1cluster_1_1birch_1_1birch.html</Path>
    <Anchor>a59c302704e8a1c4f1a3c48b39ddc6072</Anchor>
    <Abstract>Returns list of allocated CF-entry clusters where each cluster is represented by indexes (each index ...</Abstract>
    <DeclaredIn>birch.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.birch.birch</Scope>
    </TokenIdentifier>
    <Path>d6/d00/classpyclustering_1_1cluster_1_1birch_1_1birch.html</Path>
    <Anchor>ab9efce1644c14bb23e139b41db95bb2a</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>birch.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bsas</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::bsas</Scope>
    </TokenIdentifier>
    <Path>dc/d60/namespacepyclustering_1_1cluster_1_1bsas.html</Path>
    <Abstract>Cluster analysis algorithm: BSAS (Basic Sequential Algorithmic Scheme). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bsas::bsas</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Abstract>Class represents BSAS clustering algorithm - basic sequential algorithmic scheme. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a3cd78076d880c5f4a6ab4b1e53ec6336</Anchor>
    <Abstract>Creates classical BSAS algorithm. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>ae520f1bc37bfc7931c506a6ab1c2df55</Anchor>
    <Abstract>Performs cluster analysis in line with rules of BSAS algorithm. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>aacbc424e284050a97cdf4766d106c86c</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_representatives</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a97cd2de640920bb78062555d162c7c25</Anchor>
    <Abstract>Returns list of representatives of allocated clusters. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a980be5c347fd8e72500f62990e5b6ee2</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::bsas::bsas_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.bsas.bsas_visualizer</Scope>
    </TokenIdentifier>
    <Path>d3/d09/classpyclustering_1_1cluster_1_1bsas_1_1bsas__visualizer.html</Path>
    <Abstract>Visualizer of BSAS algorithm&amp;#39;s results. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.bsas.bsas_visualizer</Scope>
    </TokenIdentifier>
    <Path>d3/d09/classpyclustering_1_1cluster_1_1bsas_1_1bsas__visualizer.html</Path>
    <Anchor>ab0948035d8af3fe4773650cc848a7824</Anchor>
    <Abstract>Display BSAS clustering results. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::center_initializer</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::center_initializer</Scope>
    </TokenIdentifier>
    <Path>d8/d54/namespacepyclustering_1_1cluster_1_1center__initializer.html</Path>
    <Abstract>Collection of center initializers for algorithm that uses initial centers, for example, for K-Means or X-Means. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::center_initializer::kmeans_plusplus_initializer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.center_initializer.kmeans_plusplus_initializer</Scope>
    </TokenIdentifier>
    <Path>db/de0/classpyclustering_1_1cluster_1_1center__initializer_1_1kmeans__plusplus__initializer.html</Path>
    <Abstract>K-Means++ is an algorithm for choosing the initial centers for algorithms like K-Means or X-Means...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.center_initializer.kmeans_plusplus_initializer</Scope>
    </TokenIdentifier>
    <Path>db/de0/classpyclustering_1_1cluster_1_1center__initializer_1_1kmeans__plusplus__initializer.html</Path>
    <Anchor>a5911f126f9e9673f25b4046e5e351949</Anchor>
    <Abstract>Creates K-Means++ center initializer instance. </Abstract>
    <DeclaredIn>center_initializer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initialize</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.center_initializer.kmeans_plusplus_initializer</Scope>
    </TokenIdentifier>
    <Path>db/de0/classpyclustering_1_1cluster_1_1center__initializer_1_1kmeans__plusplus__initializer.html</Path>
    <Anchor>a3e97a8214bc2622d276cab5250328443</Anchor>
    <Abstract>Calculates initial centers using K-Means++ method. </Abstract>
    <DeclaredIn>center_initializer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FARTHEST_CENTER_CANDIDATE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.center_initializer.kmeans_plusplus_initializer</Scope>
    </TokenIdentifier>
    <Path>db/de0/classpyclustering_1_1cluster_1_1center__initializer_1_1kmeans__plusplus__initializer.html</Path>
    <Anchor>a781bc53d2aa50ccba247272bbf3cf7ee</Anchor>
    <Abstract>Constant denotes that only points with highest probabilities should be considered as centers...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::center_initializer::random_center_initializer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.center_initializer.random_center_initializer</Scope>
    </TokenIdentifier>
    <Path>db/da2/classpyclustering_1_1cluster_1_1center__initializer_1_1random__center__initializer.html</Path>
    <Abstract>Random center initializer is for generation specified amount of random of centers for specified data...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.center_initializer.random_center_initializer</Scope>
    </TokenIdentifier>
    <Path>db/da2/classpyclustering_1_1cluster_1_1center__initializer_1_1random__center__initializer.html</Path>
    <Anchor>adca5fbe609046c86c8ea97c73f5ac336</Anchor>
    <Abstract>Creates instance of random center initializer. </Abstract>
    <DeclaredIn>center_initializer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initialize</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.center_initializer.random_center_initializer</Scope>
    </TokenIdentifier>
    <Path>db/da2/classpyclustering_1_1cluster_1_1center__initializer_1_1random__center__initializer.html</Path>
    <Anchor>ab6fa3ce440570d20ab668408d7d1c9c0</Anchor>
    <Abstract>Generates random centers in line with input parameters. </Abstract>
    <DeclaredIn>center_initializer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clarans</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::clarans</Scope>
    </TokenIdentifier>
    <Path>d9/d30/namespacepyclustering_1_1cluster_1_1clarans.html</Path>
    <Abstract>Cluster analysis algorithm: CLARANS. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clarans::clarans</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.clarans.clarans</Scope>
    </TokenIdentifier>
    <Path>d6/d42/classpyclustering_1_1cluster_1_1clarans_1_1clarans.html</Path>
    <Abstract>Class represents clustering algorithm CLARANS (a method for clustering objects for spatial data minin...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clarans.clarans</Scope>
    </TokenIdentifier>
    <Path>d6/d42/classpyclustering_1_1cluster_1_1clarans_1_1clarans.html</Path>
    <Anchor>aece5530106407e4344afc9a31ba0782c</Anchor>
    <Abstract>Constructor of clustering algorithm CLARANS. </Abstract>
    <DeclaredIn>clarans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clarans.clarans</Scope>
    </TokenIdentifier>
    <Path>d6/d42/classpyclustering_1_1cluster_1_1clarans_1_1clarans.html</Path>
    <Anchor>ab5fd6c3bf09ad3ad22a6c10e8b98e430</Anchor>
    <Abstract>Performs cluster analysis in line with rules of CLARANS algorithm. </Abstract>
    <DeclaredIn>clarans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clarans.clarans</Scope>
    </TokenIdentifier>
    <Path>d6/d42/classpyclustering_1_1cluster_1_1clarans_1_1clarans.html</Path>
    <Anchor>aa86036a4106201c5c9b73dbf2d22cfc1</Anchor>
    <Abstract>Returns allocated clusters by the algorithm. </Abstract>
    <DeclaredIn>clarans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_medoids</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clarans.clarans</Scope>
    </TokenIdentifier>
    <Path>d6/d42/classpyclustering_1_1cluster_1_1clarans_1_1clarans.html</Path>
    <Anchor>a1a2cd1b24f9bfe2a86068df3037f85a9</Anchor>
    <Abstract>Returns list of medoids of allocated clusters. </Abstract>
    <DeclaredIn>clarans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clarans.clarans</Scope>
    </TokenIdentifier>
    <Path>d6/d42/classpyclustering_1_1cluster_1_1clarans_1_1clarans.html</Path>
    <Anchor>a39b1e8b9a11c7e25633ce5ca63aba7a7</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>clarans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clique</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::clique</Scope>
    </TokenIdentifier>
    <Path>d2/da9/namespacepyclustering_1_1cluster_1_1clique.html</Path>
    <Abstract>Cluster analysis algorithm: CLIQUE. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clique::clique</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.clique.clique</Scope>
    </TokenIdentifier>
    <Path>d2/d4f/classpyclustering_1_1cluster_1_1clique_1_1clique.html</Path>
    <Abstract>Class implements CLIQUE grid based clustering algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique</Scope>
    </TokenIdentifier>
    <Path>d2/d4f/classpyclustering_1_1cluster_1_1clique_1_1clique.html</Path>
    <Anchor>ad249c9238683ffaa30d28af3f70cf98b</Anchor>
    <Abstract>Create CLIQUE clustering algorithm. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique</Scope>
    </TokenIdentifier>
    <Path>d2/d4f/classpyclustering_1_1cluster_1_1clique_1_1clique.html</Path>
    <Anchor>af6552e1194c692c988a8997fa4dee6d8</Anchor>
    <Abstract>Performs clustering process in line with rules of CLIQUE clustering algorithm. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique</Scope>
    </TokenIdentifier>
    <Path>d2/d4f/classpyclustering_1_1cluster_1_1clique_1_1clique.html</Path>
    <Anchor>a90c60f53d48649345bf77f0a156f6a4a</Anchor>
    <Abstract>Returns allocated clusters. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_noise</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique</Scope>
    </TokenIdentifier>
    <Path>d2/d4f/classpyclustering_1_1cluster_1_1clique_1_1clique.html</Path>
    <Anchor>af2bbc2e1450db23a7221e11cd15d1c5f</Anchor>
    <Abstract>Returns allocated noise. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cells</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique</Scope>
    </TokenIdentifier>
    <Path>d2/d4f/classpyclustering_1_1cluster_1_1clique_1_1clique.html</Path>
    <Anchor>ac2dbf1d8fbf5751594ed0027dae17ad9</Anchor>
    <Abstract>Returns CLIQUE blocks that are formed during clustering process. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique</Scope>
    </TokenIdentifier>
    <Path>d2/d4f/classpyclustering_1_1cluster_1_1clique_1_1clique.html</Path>
    <Anchor>a0aa5babfeac42289cdea6cd4b115c8c6</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clique::clique_block</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Abstract>CLIQUE block contains information about its logical location in grid, spatial location in data space ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a8c13c586a01cf9c09ab588cd8600586c</Anchor>
    <Abstract>Initializes CLIQUE block. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a48a4c1919443aea5fc05ccaf2f3292d5</Anchor>
    <Abstract>Returns string representation of the block using its logical location in CLIQUE grid. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a65f5d84921e252e5cae2b70cdb6d2066</Anchor>
    <Abstract>Returns string representation of the block using its logical location in CLIQUE grid. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>logical_location</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a7c767836d716b0b2b64cee39cb669943</Anchor>
    <Abstract>Logical location is represented by coordinates in CLIQUE grid, for example, in case of 2x2 grid block...</Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>logical_location</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>af61b42a8c53279700e21d96363dae38b</Anchor>
    <Abstract>Assign logical location to CLIQUE block. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spatial_location</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>ac339d07fc8e0ad44315d250c0ee74c66</Anchor>
    <Abstract>Spatial location is represented by real data space coordinates. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spatial_location</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a6ba9292c6757ccd4bd661ad04197a411</Anchor>
    <Abstract>Assign spatial location to CLIQUE block. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dimensions</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a11ac8416ad1c6ee94838180c30bb40cb</Anchor>
    <Abstract>Amount of dimensions where CLIQUE block is located. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>points</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a01219182e9306d57da62419a5b683597</Anchor>
    <Abstract>Points that belong to the CLIQUE block. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visited</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>aa0d6ce6c0e3e034a6c7743835741f982</Anchor>
    <Abstract>Defines whether block is visited during cluster analysis. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visited</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a9e623c60c6eb9077e3c12102c259c827</Anchor>
    <Abstract>Marks or unmarks block as a visited. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>capture_points</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>a67c718fd1cd892c91c967fea168f7c48</Anchor>
    <Abstract>Finds points that belong to this block using availability map to reduce computational complexity by c...</Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_location_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.clique_block</Scope>
    </TokenIdentifier>
    <Path>d6/d6f/classpyclustering_1_1cluster_1_1clique_1_1clique__block.html</Path>
    <Anchor>aa40bcb7e504bedf913e857a0fabebd47</Anchor>
    <Abstract>Forms list of logical location of each neighbor for this particular CLIQUE block. ...</Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clique::clique_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.clique.clique_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/d02/classpyclustering_1_1cluster_1_1clique_1_1clique__visualizer.html</Path>
    <Abstract>Visualizer of CLIQUE algorithm&amp;#39;s results. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_grid</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.clique.clique_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/d02/classpyclustering_1_1cluster_1_1clique_1_1clique__visualizer.html</Path>
    <Anchor>a4abd6b1e2c0a8a3bfaccfbc5783ef403</Anchor>
    <Abstract>Show CLIQUE blocks as a grid in data space. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.clique.clique_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/d02/classpyclustering_1_1cluster_1_1clique_1_1clique__visualizer.html</Path>
    <Anchor>a8e8bfa29828d2b10a4346964bc601a2f</Anchor>
    <Abstract>Display CLIQUE clustering results. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clique::coordinate_iterator</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.clique.coordinate_iterator</Scope>
    </TokenIdentifier>
    <Path>db/ddb/classpyclustering_1_1cluster_1_1clique_1_1coordinate__iterator.html</Path>
    <Abstract>Coordinate iterator is used to generate logical location description for each CLIQUE block...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.coordinate_iterator</Scope>
    </TokenIdentifier>
    <Path>db/ddb/classpyclustering_1_1cluster_1_1clique_1_1coordinate__iterator.html</Path>
    <Anchor>a3cf20c93f401b706055e1b12e1c8f850</Anchor>
    <Abstract>Initializes coordinate iterator for CLIQUE algorithm. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_coordinate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.coordinate_iterator</Scope>
    </TokenIdentifier>
    <Path>db/ddb/classpyclustering_1_1cluster_1_1clique_1_1coordinate__iterator.html</Path>
    <Anchor>a36f0c0e5f3c0c95491a08b8ffc5a8b5a</Anchor>
    <Abstract>Returns current block coordinate. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>increment</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.coordinate_iterator</Scope>
    </TokenIdentifier>
    <Path>db/ddb/classpyclustering_1_1cluster_1_1clique_1_1coordinate__iterator.html</Path>
    <Anchor>a581f0f5d670aa42e6e56634985d4c75e</Anchor>
    <Abstract>Forms logical location for next block. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::clique::spatial_block</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.clique.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d83/classpyclustering_1_1cluster_1_1clique_1_1spatial__block.html</Path>
    <Abstract>Geometrical description of CLIQUE block in data space. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d83/classpyclustering_1_1cluster_1_1clique_1_1spatial__block.html</Path>
    <Anchor>a5318d29fbd6d6eae3aaef67c18f213ff</Anchor>
    <Abstract>Creates spatial block in data space. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d83/classpyclustering_1_1cluster_1_1clique_1_1spatial__block.html</Path>
    <Anchor>a1ae3ccfd68fe96252e30e81a128a6a4f</Anchor>
    <Abstract>Returns string block description. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__contains__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d83/classpyclustering_1_1cluster_1_1clique_1_1spatial__block.html</Path>
    <Anchor>aac5bb3a57346c648bfcba5057a6990c2</Anchor>
    <Abstract>Point is considered as contained if it lies in block (belong to it). </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_corners</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.clique.spatial_block</Scope>
    </TokenIdentifier>
    <Path>d7/d83/classpyclustering_1_1cluster_1_1clique_1_1spatial__block.html</Path>
    <Anchor>a3d91a1917cd1a2356ff06b31a371a4ee</Anchor>
    <Abstract>Return spatial description of current block. </Abstract>
    <DeclaredIn>clique.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::cure</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::cure</Scope>
    </TokenIdentifier>
    <Path>d6/dd7/namespacepyclustering_1_1cluster_1_1cure.html</Path>
    <Abstract>Cluster analysis algorithm: CURE. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::cure::cure</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.cure.cure</Scope>
    </TokenIdentifier>
    <Path>dc/d6d/classpyclustering_1_1cluster_1_1cure_1_1cure.html</Path>
    <Abstract>Class represents clustering algorithm CURE with KD-tree optimization. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure</Scope>
    </TokenIdentifier>
    <Path>dc/d6d/classpyclustering_1_1cluster_1_1cure_1_1cure.html</Path>
    <Anchor>a71d43d2ec21eae545893ad48f4aac373</Anchor>
    <Abstract>Constructor of clustering algorithm CURE. </Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure</Scope>
    </TokenIdentifier>
    <Path>dc/d6d/classpyclustering_1_1cluster_1_1cure_1_1cure.html</Path>
    <Anchor>a9681798e4dd252dce24eb0d005e3fee7</Anchor>
    <Abstract>Performs cluster analysis in line with rules of CURE algorithm. </Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure</Scope>
    </TokenIdentifier>
    <Path>dc/d6d/classpyclustering_1_1cluster_1_1cure_1_1cure.html</Path>
    <Anchor>a249cbf1f42acbf9471f8bbcb2652e464</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_representors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure</Scope>
    </TokenIdentifier>
    <Path>dc/d6d/classpyclustering_1_1cluster_1_1cure_1_1cure.html</Path>
    <Anchor>aca5ae67fa6606a56e666f96d9ba4b8e1</Anchor>
    <Abstract>Returns list of point-representors of each cluster. </Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_means</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure</Scope>
    </TokenIdentifier>
    <Path>dc/d6d/classpyclustering_1_1cluster_1_1cure_1_1cure.html</Path>
    <Anchor>a614deb907c3881232f985b6306661daa</Anchor>
    <Abstract>Returns list of mean values of each cluster. </Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure</Scope>
    </TokenIdentifier>
    <Path>dc/d6d/classpyclustering_1_1cluster_1_1cure_1_1cure.html</Path>
    <Anchor>a6eeb71a30b4f25f8ccf7999cf5d54b14</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::cure::cure_cluster</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Abstract>Represents data cluster in CURE term. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>a0168291192be6a9d49f36ed8c1ff9b03</Anchor>
    <Abstract>Constructor of CURE cluster. </Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>a8fda94f5732d4654e45d423adc6bc423</Anchor>
    <Abstract>Displays distance to closest cluster and points that are contained by current cluster. </Abstract>
    <DeclaredIn>cure.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>points</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>aa364fe5405be4ab10a0821cdee19135e</Anchor>
    <Abstract>List of points that make up cluster. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexes</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>a5356bdd41a59d1f86478901d7c676834</Anchor>
    <Abstract>Point indexes in dataset. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mean</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>a2602f6bd9b96684b591e9d65fe9c6e1e</Anchor>
    <Abstract>Mean of points that make up cluster. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rep</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>ab5e97eedf6ad7192e87c46e6c293efca</Anchor>
    <Abstract>List of points that represents clusters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>closest</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>a0bb0fca900afa6beed9c511e8a174143</Anchor>
    <Abstract>Pointer to the closest cluster. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distance</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.cure.cure_cluster</Scope>
    </TokenIdentifier>
    <Path>df/d3b/classpyclustering_1_1cluster_1_1cure_1_1cure__cluster.html</Path>
    <Anchor>a74568200c347adc33863e372735c42cf</Anchor>
    <Abstract>Distance to the closest cluster. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::dbscan</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::dbscan</Scope>
    </TokenIdentifier>
    <Path>d9/dfb/namespacepyclustering_1_1cluster_1_1dbscan.html</Path>
    <Abstract>Cluster analysis algorithm: DBSCAN. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::dbscan::dbscan</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.dbscan.dbscan</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1dbscan_1_1dbscan.html</Path>
    <Abstract>Class represents clustering algorithm DBSCAN. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.dbscan.dbscan</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1dbscan_1_1dbscan.html</Path>
    <Anchor>a0fa9239a6fd049be9b5bcec5e9041d37</Anchor>
    <Abstract>Constructor of clustering algorithm DBSCAN. </Abstract>
    <DeclaredIn>dbscan.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.dbscan.dbscan</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1dbscan_1_1dbscan.html</Path>
    <Anchor>aa6b700b2f35deb8d710a920e94efc497</Anchor>
    <Abstract>Performs cluster analysis in line with rules of DBSCAN algorithm. </Abstract>
    <DeclaredIn>dbscan.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.dbscan.dbscan</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1dbscan_1_1dbscan.html</Path>
    <Anchor>a9a4c3b9240d17193a04bcc662e118d41</Anchor>
    <Abstract>Returns allocated clusters. </Abstract>
    <DeclaredIn>dbscan.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_noise</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.dbscan.dbscan</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1dbscan_1_1dbscan.html</Path>
    <Anchor>a09cb96b4f67493be2a08bf17ced08761</Anchor>
    <Abstract>Returns allocated noise. </Abstract>
    <DeclaredIn>dbscan.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.dbscan.dbscan</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1dbscan_1_1dbscan.html</Path>
    <Anchor>a47f4f4d12d149d61b64cb7d83e794aed</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>dbscan.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::elbow</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::elbow</Scope>
    </TokenIdentifier>
    <Path>dd/dba/namespacepyclustering_1_1cluster_1_1elbow.html</Path>
    <Abstract>Elbow method to determine the optimal number of clusters for k-means clustering. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::elbow::elbow</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.elbow.elbow</Scope>
    </TokenIdentifier>
    <Path>d3/d70/classpyclustering_1_1cluster_1_1elbow_1_1elbow.html</Path>
    <Abstract>Class represents Elbow method that is used to find out appropriate amount of clusters in a dataset...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.elbow.elbow</Scope>
    </TokenIdentifier>
    <Path>d3/d70/classpyclustering_1_1cluster_1_1elbow_1_1elbow.html</Path>
    <Anchor>ad08878a646ed7dfd79b20de3b31a2442</Anchor>
    <Abstract>Construct Elbow method. </Abstract>
    <DeclaredIn>elbow.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.elbow.elbow</Scope>
    </TokenIdentifier>
    <Path>d3/d70/classpyclustering_1_1cluster_1_1elbow_1_1elbow.html</Path>
    <Anchor>a933231bd58cae2adc7e48a3c251a2d5d</Anchor>
    <Abstract>Performs analysis to find out appropriate amount of clusters. </Abstract>
    <DeclaredIn>elbow.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_amount</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.elbow.elbow</Scope>
    </TokenIdentifier>
    <Path>d3/d70/classpyclustering_1_1cluster_1_1elbow_1_1elbow.html</Path>
    <Anchor>a7e33f1a4d5a0c8e0db85157f6a433095</Anchor>
    <Abstract>Returns appropriate amount of clusters. </Abstract>
    <DeclaredIn>elbow.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_wce</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.elbow.elbow</Scope>
    </TokenIdentifier>
    <Path>d3/d70/classpyclustering_1_1cluster_1_1elbow_1_1elbow.html</Path>
    <Anchor>ac71333eb3ef20930b7776db367acdd17</Anchor>
    <Abstract>Returns list of total within cluster errors for each K-value (kmin, kmin + 1, ..., kmax - 1). </Abstract>
    <DeclaredIn>elbow.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ema</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::ema</Scope>
    </TokenIdentifier>
    <Path>d1/d24/namespacepyclustering_1_1cluster_1_1ema.html</Path>
    <Abstract>Cluster analysis algorithm: Expectation-Maximization Algorithm for Gaussian Mixture Model...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gaussian</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::cluster::ema</Scope>
    </TokenIdentifier>
    <Path>d1/d24/namespacepyclustering_1_1cluster_1_1ema.html</Path>
    <Anchor>a67b0ae2874bd745fa0237e6bbda9f8f4</Anchor>
    <Abstract>Calculates gaussian for dataset using specified mean (mathematical expectation) and variance or covar...</Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ema::ema</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ema.ema</Scope>
    </TokenIdentifier>
    <Path>d7/d7e/classpyclustering_1_1cluster_1_1ema_1_1ema.html</Path>
    <Abstract>Expectation-Maximization clustering algorithm for Gaussian Mixture Model (GMM). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema</Scope>
    </TokenIdentifier>
    <Path>d7/d7e/classpyclustering_1_1cluster_1_1ema_1_1ema.html</Path>
    <Anchor>ac65d1721e8f7be947f08d782df01ce24</Anchor>
    <Abstract>Initializes Expectation-Maximization algorithm for cluster analysis. </Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema</Scope>
    </TokenIdentifier>
    <Path>d7/d7e/classpyclustering_1_1cluster_1_1ema_1_1ema.html</Path>
    <Anchor>ae46cd8496135dd7810f2d6b2d5dca7b7</Anchor>
    <Abstract>Run clustering process of the algorithm. </Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema</Scope>
    </TokenIdentifier>
    <Path>d7/d7e/classpyclustering_1_1cluster_1_1ema_1_1ema.html</Path>
    <Anchor>a8874525783fa0def71376fe9729c35cf</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_centers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema</Scope>
    </TokenIdentifier>
    <Path>d7/d7e/classpyclustering_1_1cluster_1_1ema_1_1ema.html</Path>
    <Anchor>a509a5cd1dbe826a05d8c126664f2c5c4</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_covariances</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema</Scope>
    </TokenIdentifier>
    <Path>d7/d7e/classpyclustering_1_1cluster_1_1ema_1_1ema.html</Path>
    <Anchor>a24b52825c48898a9e804a4196bf4184b</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_probabilities</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema</Scope>
    </TokenIdentifier>
    <Path>d7/d7e/classpyclustering_1_1cluster_1_1ema_1_1ema.html</Path>
    <Anchor>a11abfb2f3756b15448350b44af1db53c</Anchor>
    <Abstract>Returns 2-dimensional list with belong probability of each object from data to cluster correspondingl...</Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ema::ema_init_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ema.ema_init_type</Scope>
    </TokenIdentifier>
    <Path>d4/d22/classpyclustering_1_1cluster_1_1ema_1_1ema__init__type.html</Path>
    <Abstract>Enumeration of initialization types for Expectation-Maximization algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RANDOM_INITIALIZATION</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.ema.ema_init_type</Scope>
    </TokenIdentifier>
    <Path>d4/d22/classpyclustering_1_1cluster_1_1ema_1_1ema__init__type.html</Path>
    <Anchor>aaa35dbc90cba60a1d26666d9a03e188f</Anchor>
    <Abstract>Means are randomly taken from input dataset and variance or covariance is calculated based on spheric...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>KMEANS_INITIALIZATION</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.ema.ema_init_type</Scope>
    </TokenIdentifier>
    <Path>d4/d22/classpyclustering_1_1cluster_1_1ema_1_1ema__init__type.html</Path>
    <Anchor>a8d08b85178445da3f048b103ceb69eec</Anchor>
    <Abstract>Two step initialization. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ema::ema_initializer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ema.ema_initializer</Scope>
    </TokenIdentifier>
    <Path>dd/da0/classpyclustering_1_1cluster_1_1ema_1_1ema__initializer.html</Path>
    <Abstract>Provides servies for preparing initial means and covariances for Expectation-Maximization algorithm...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_initializer</Scope>
    </TokenIdentifier>
    <Path>dd/da0/classpyclustering_1_1cluster_1_1ema_1_1ema__initializer.html</Path>
    <Anchor>aae13060b9af2c6be76c10c94f896cb64</Anchor>
    <Abstract>Constructs EM initializer. </Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initialize</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_initializer</Scope>
    </TokenIdentifier>
    <Path>dd/da0/classpyclustering_1_1cluster_1_1ema_1_1ema__initializer.html</Path>
    <Anchor>a1abece34ca230019690c880d025135b0</Anchor>
    <Abstract>Calculates initial parameters for EM algorithm: means and covariances using specified strategy...</Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ema::ema_observer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Abstract>Observer of EM algorithm for collecting algorithm state on each step. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Anchor>af87d973257eee894d2d04431ad739278</Anchor>
    <Abstract>Initializes EM observer. </Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Anchor>a5032e6f1e626a7e582aa3ea38072379d</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_iterations</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Anchor>af33afbdfc124e742e54cc3519cb3a0ac</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_evolution_means</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Anchor>add8e66c960e3b9768fd09d856ec48e2f</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_evolution_covariances</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Anchor>ae4f22928684c817aa4ce3105303d2246</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_evolution_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Anchor>a02460130a1fdfa3343f5f5ffcc44bddd</Anchor>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>notify</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ema.ema_observer</Scope>
    </TokenIdentifier>
    <Path>db/d18/classpyclustering_1_1cluster_1_1ema_1_1ema__observer.html</Path>
    <Anchor>ab0a7e8dd27feb83cfddb65180c97f874</Anchor>
    <Abstract>This method is used by the algorithm to notify observer about changes where the algorithm should prov...</Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ema::ema_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ema.ema_visualizer</Scope>
    </TokenIdentifier>
    <Path>d8/d73/classpyclustering_1_1cluster_1_1ema_1_1ema__visualizer.html</Path>
    <Abstract>Visualizer of EM algorithm&amp;#39;s results. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.ema.ema_visualizer</Scope>
    </TokenIdentifier>
    <Path>d8/d73/classpyclustering_1_1cluster_1_1ema_1_1ema__visualizer.html</Path>
    <Anchor>a8ce615d6087cd34f362f55ebbe38a7f3</Anchor>
    <Abstract>Draws clusters and in case of two-dimensional dataset draws their ellipses. </Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_cluster_allocation</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.ema.ema_visualizer</Scope>
    </TokenIdentifier>
    <Path>d8/d73/classpyclustering_1_1cluster_1_1ema_1_1ema__visualizer.html</Path>
    <Anchor>a4f47b37d6f554cd005726c788304b9dc</Anchor>
    <Abstract>Animates clustering process that is performed by EM algorithm. </Abstract>
    <DeclaredIn>ema.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::encoder</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::encoder</Scope>
    </TokenIdentifier>
    <Path>d0/ddd/namespacepyclustering_1_1cluster_1_1encoder.html</Path>
    <Abstract>Module for representing clustering results. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::encoder::cluster_encoder</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.encoder.cluster_encoder</Scope>
    </TokenIdentifier>
    <Path>d8/d02/classpyclustering_1_1cluster_1_1encoder_1_1cluster__encoder.html</Path>
    <Abstract>Provides service to change clustering result representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.encoder.cluster_encoder</Scope>
    </TokenIdentifier>
    <Path>d8/d02/classpyclustering_1_1cluster_1_1encoder_1_1cluster__encoder.html</Path>
    <Anchor>a0a3bd7301b5331c4a95f73a5b8212c4a</Anchor>
    <Abstract>Constructor of clustering result representor. </Abstract>
    <DeclaredIn>encoder.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.encoder.cluster_encoder</Scope>
    </TokenIdentifier>
    <Path>d8/d02/classpyclustering_1_1cluster_1_1encoder_1_1cluster__encoder.html</Path>
    <Anchor>af854261e42f71423d2f539b681ad588d</Anchor>
    <Abstract>Returns current cluster representation. </Abstract>
    <DeclaredIn>encoder.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.encoder.cluster_encoder</Scope>
    </TokenIdentifier>
    <Path>d8/d02/classpyclustering_1_1cluster_1_1encoder_1_1cluster__encoder.html</Path>
    <Anchor>ad165908c400945bd9e0fae89a2b3bf20</Anchor>
    <Abstract>Returns clusters representation. </Abstract>
    <DeclaredIn>encoder.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_data</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.encoder.cluster_encoder</Scope>
    </TokenIdentifier>
    <Path>d8/d02/classpyclustering_1_1cluster_1_1encoder_1_1cluster__encoder.html</Path>
    <Anchor>a770c834d0fc741aafdfdbf398bfbfacb</Anchor>
    <Abstract>Returns data that corresponds to clusters. </Abstract>
    <DeclaredIn>encoder.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.encoder.cluster_encoder</Scope>
    </TokenIdentifier>
    <Path>d8/d02/classpyclustering_1_1cluster_1_1encoder_1_1cluster__encoder.html</Path>
    <Anchor>a5b8ebaeea1054b819ef2bbd6d59d2cee</Anchor>
    <Abstract>Change clusters encoding to specified type (index list, object list, labeling). </Abstract>
    <DeclaredIn>encoder.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::encoder::type_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.encoder.type_encoding</Scope>
    </TokenIdentifier>
    <Path>d5/d41/classpyclustering_1_1cluster_1_1encoder_1_1type__encoding.html</Path>
    <Abstract>Enumeration of encoding types (index labeling, index list separation, object list separation)...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CLUSTER_INDEX_LABELING</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.encoder.type_encoding</Scope>
    </TokenIdentifier>
    <Path>d5/d41/classpyclustering_1_1cluster_1_1encoder_1_1type__encoding.html</Path>
    <Anchor>a6e930da74fbe0b0bc1783fd28387f7a3</Anchor>
    <Abstract>Results are represented by list of indexes and belonging to the cluster is defined by cluster index a...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CLUSTER_INDEX_LIST_SEPARATION</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.encoder.type_encoding</Scope>
    </TokenIdentifier>
    <Path>d5/d41/classpyclustering_1_1cluster_1_1encoder_1_1type__encoding.html</Path>
    <Anchor>a55e89d2bfa06402ce1ccd13fa478cc19</Anchor>
    <Abstract>Results are represented by list of lists, where each list consists of object indexes, for example [ [0, 1, 2], [3, 4, 5], [6, 7] ]. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CLUSTER_OBJECT_LIST_SEPARATION</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.encoder.type_encoding</Scope>
    </TokenIdentifier>
    <Path>d5/d41/classpyclustering_1_1cluster_1_1encoder_1_1type__encoding.html</Path>
    <Anchor>adf277d7bc7431e5682a363f170a0f9b2</Anchor>
    <Abstract>Results are represented by list of lists, where each list consists of objects, for example [ [obj1...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::fcm</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::fcm</Scope>
    </TokenIdentifier>
    <Path>de/df0/namespacepyclustering_1_1cluster_1_1fcm.html</Path>
    <Abstract>Cluster analysis algorithm: Fuzzy C-Means. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::fcm::fcm</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.fcm.fcm</Scope>
    </TokenIdentifier>
    <Path>d2/d6a/classpyclustering_1_1cluster_1_1fcm_1_1fcm.html</Path>
    <Abstract>Class represents Fuzzy C-means (FCM) clustering algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.fcm.fcm</Scope>
    </TokenIdentifier>
    <Path>d2/d6a/classpyclustering_1_1cluster_1_1fcm_1_1fcm.html</Path>
    <Anchor>acac83a83b740785c547c3bad8f858e2c</Anchor>
    <Abstract>Initialize Fuzzy C-Means algorithm. </Abstract>
    <DeclaredIn>fcm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.fcm.fcm</Scope>
    </TokenIdentifier>
    <Path>d2/d6a/classpyclustering_1_1cluster_1_1fcm_1_1fcm.html</Path>
    <Anchor>a9d65f25cb5a513c575d9e82f581bbd78</Anchor>
    <Abstract>Performs cluster analysis in line with Fuzzy C-Means algorithm. </Abstract>
    <DeclaredIn>fcm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.fcm.fcm</Scope>
    </TokenIdentifier>
    <Path>d2/d6a/classpyclustering_1_1cluster_1_1fcm_1_1fcm.html</Path>
    <Anchor>a74768c0f71d443990bb2b8f82dc729f5</Anchor>
    <Abstract>Returns allocated clusters that consists of points that most likely (in line with membership) belong ...</Abstract>
    <DeclaredIn>fcm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_centers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.fcm.fcm</Scope>
    </TokenIdentifier>
    <Path>d2/d6a/classpyclustering_1_1cluster_1_1fcm_1_1fcm.html</Path>
    <Anchor>add4e0dbbd9f562314f061942a80a8b81</Anchor>
    <Abstract>Returns list of centers of allocated clusters. </Abstract>
    <DeclaredIn>fcm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_membership</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.fcm.fcm</Scope>
    </TokenIdentifier>
    <Path>d2/d6a/classpyclustering_1_1cluster_1_1fcm_1_1fcm.html</Path>
    <Anchor>a7cf8cb0dfa432dd3b2b2917d4f10d8da</Anchor>
    <Abstract>Returns cluster membership (probability) for each point in data. </Abstract>
    <DeclaredIn>fcm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ga</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::ga</Scope>
    </TokenIdentifier>
    <Path>d8/dc0/namespacepyclustering_1_1cluster_1_1ga.html</Path>
    <Abstract>Cluster analysis algorithm: Genetic clustering algorithm (GA). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ga::ga_observer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Abstract>Genetic algorithm observer that is used to collect information about clustering process on each itera...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a0f63ba305a1b45b3866008b0d5eda214</Anchor>
    <Abstract>Constructs genetic algorithm observer to collect specific information. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a6a39eddfde44fc36f01affe93f8a0b62</Anchor>
    <Abstract>Returns amount of iterations that genetic algorithm was observed. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect_global_best</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a382797b164e2d39c9aad5046e0eb6fbc</Anchor>
    <Abstract>Stores the best chromosome and its fitness function&amp;#39;s value. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect_population_best</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a5e5ffc74d81e953e62ca442706353bad</Anchor>
    <Abstract>Stores the best chromosome for current specific iteration and its fitness function&amp;#39;s value...</Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect_mean</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a4d533e3c46f75e885d06f6f6b103955f</Anchor>
    <Abstract>Stores average value of fitness function among chromosomes on specific iteration. ...</Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_global_best</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a90bc9e2e120901cf8fbe3c36274273f3</Anchor>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_population_best</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a03b69688280eaa7c08bd1ee785187126</Anchor>
    <Abstract>(dict) Returns dictionary with keys &amp;#39;chromosome&amp;#39; and &amp;#39;fitness_function&amp;#39; where evolution of the curren...</Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_mean_fitness_function</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.ga_observer</Scope>
    </TokenIdentifier>
    <Path>d9/dcf/classpyclustering_1_1cluster_1_1ga_1_1ga__observer.html</Path>
    <Anchor>a63ca420626b03408a3e12ce5e2385a93</Anchor>
    <Abstract>(list) Returns fitness function&amp;#39;s values on each iteration. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ga::ga_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ga.ga_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d78/classpyclustering_1_1cluster_1_1ga_1_1ga__visualizer.html</Path>
    <Abstract>Genetic algorithm visualizer is used to show clustering results that are specific for this particular...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_evolution</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.ga.ga_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d78/classpyclustering_1_1cluster_1_1ga_1_1ga__visualizer.html</Path>
    <Anchor>a9f68bc76392fe50a366ac6a339965417</Anchor>
    <Abstract>Displays evolution of fitness function for the best chromosome, for the current best chromosome and a...</Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.ga.ga_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d78/classpyclustering_1_1cluster_1_1ga_1_1ga__visualizer.html</Path>
    <Anchor>ae78c109542a61f4719b075c9d32fa228</Anchor>
    <Abstract>Shows allocated clusters by the genetic algorithm. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_cluster_allocation</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.ga.ga_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d78/classpyclustering_1_1cluster_1_1ga_1_1ga__visualizer.html</Path>
    <Anchor>a99a505252e9aed460ef43f7f38f61d8b</Anchor>
    <Abstract>Animate clustering process of genetic clustering algorithm. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ga::genetic_algorithm</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ga.genetic_algorithm</Scope>
    </TokenIdentifier>
    <Path>d5/d4d/classpyclustering_1_1cluster_1_1ga_1_1genetic__algorithm.html</Path>
    <Abstract>Class represents Genetic clustering algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.genetic_algorithm</Scope>
    </TokenIdentifier>
    <Path>d5/d4d/classpyclustering_1_1cluster_1_1ga_1_1genetic__algorithm.html</Path>
    <Anchor>af40b9f4cdf159c8f9b23ee6bca20522c</Anchor>
    <Abstract>Initialize genetic clustering algorithm for cluster analysis. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.genetic_algorithm</Scope>
    </TokenIdentifier>
    <Path>d5/d4d/classpyclustering_1_1cluster_1_1ga_1_1genetic__algorithm.html</Path>
    <Anchor>aea3ae67ee20677bbf85ed6f9ab587eb1</Anchor>
    <Abstract>Perform clustering procedure in line with rule of genetic clustering algorithm. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_observer</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.genetic_algorithm</Scope>
    </TokenIdentifier>
    <Path>d5/d4d/classpyclustering_1_1cluster_1_1ga_1_1genetic__algorithm.html</Path>
    <Anchor>aff215c8265a9b80214f9db1bce604375</Anchor>
    <Abstract>Returns genetic algorithm observer. </Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ga.genetic_algorithm</Scope>
    </TokenIdentifier>
    <Path>d5/d4d/classpyclustering_1_1cluster_1_1ga_1_1genetic__algorithm.html</Path>
    <Anchor>a7b20ff20f19758e97aeab6f67f47eb39</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects from the data...</Abstract>
    <DeclaredIn>ga.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::generator</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::generator</Scope>
    </TokenIdentifier>
    <Path>d1/dc7/namespacepyclustering_1_1cluster_1_1generator.html</Path>
    <Abstract>Cluster generator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::generator::data_generator</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.generator.data_generator</Scope>
    </TokenIdentifier>
    <Path>d3/d6d/classpyclustering_1_1cluster_1_1generator_1_1data__generator.html</Path>
    <Abstract>Data generator provides services to generate data with clusters with normal distribution. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.generator.data_generator</Scope>
    </TokenIdentifier>
    <Path>d3/d6d/classpyclustering_1_1cluster_1_1generator_1_1data__generator.html</Path>
    <Anchor>a7c81dd7b0781e0e00c44b4de97d5ea6c</Anchor>
    <Abstract>Constructs data generator for generating data-sets. </Abstract>
    <DeclaredIn>generator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>generate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.generator.data_generator</Scope>
    </TokenIdentifier>
    <Path>d3/d6d/classpyclustering_1_1cluster_1_1generator_1_1data__generator.html</Path>
    <Anchor>a80567aba1a793e91555e9f71180ef8b0</Anchor>
    <Abstract>Generates data in line with generator parameters. </Abstract>
    <DeclaredIn>generator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::gmeans</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::gmeans</Scope>
    </TokenIdentifier>
    <Path>dc/d86/namespacepyclustering_1_1cluster_1_1gmeans.html</Path>
    <Abstract>The module contains G-Means algorithm and other related services. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::gmeans::gmeans</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.gmeans.gmeans</Scope>
    </TokenIdentifier>
    <Path>d8/d3c/classpyclustering_1_1cluster_1_1gmeans_1_1gmeans.html</Path>
    <Abstract>Class implements G-Means clustering algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.gmeans.gmeans</Scope>
    </TokenIdentifier>
    <Path>d8/d3c/classpyclustering_1_1cluster_1_1gmeans_1_1gmeans.html</Path>
    <Anchor>ae6380a4eae6d257280791c509d764802</Anchor>
    <Abstract>Initializes G-Means algorithm. </Abstract>
    <DeclaredIn>gmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.gmeans.gmeans</Scope>
    </TokenIdentifier>
    <Path>d8/d3c/classpyclustering_1_1cluster_1_1gmeans_1_1gmeans.html</Path>
    <Anchor>a4bf52e834f78480157010e5671e33836</Anchor>
    <Abstract>Performs cluster analysis in line with rules of G-Means algorithm. </Abstract>
    <DeclaredIn>gmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>predict</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.gmeans.gmeans</Scope>
    </TokenIdentifier>
    <Path>d8/d3c/classpyclustering_1_1cluster_1_1gmeans_1_1gmeans.html</Path>
    <Anchor>a31a49faf646f5982f9efcc1345aebf9d</Anchor>
    <Abstract>Calculates the closest cluster to each point. </Abstract>
    <DeclaredIn>gmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.gmeans.gmeans</Scope>
    </TokenIdentifier>
    <Path>d8/d3c/classpyclustering_1_1cluster_1_1gmeans_1_1gmeans.html</Path>
    <Anchor>a3d114b2bf670616cbed1e18bc1986653</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>gmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_centers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.gmeans.gmeans</Scope>
    </TokenIdentifier>
    <Path>d8/d3c/classpyclustering_1_1cluster_1_1gmeans_1_1gmeans.html</Path>
    <Anchor>a12ce1914190454f39e237098e76f6bf2</Anchor>
    <Abstract>Returns list of centers of allocated clusters. </Abstract>
    <DeclaredIn>gmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_total_wce</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.gmeans.gmeans</Scope>
    </TokenIdentifier>
    <Path>d8/d3c/classpyclustering_1_1cluster_1_1gmeans_1_1gmeans.html</Path>
    <Anchor>a9a079e2af18d28a438256e016690b820</Anchor>
    <Abstract>Returns sum of metric errors that depends on metric that was used for clustering (by default SSE - Su...</Abstract>
    <DeclaredIn>gmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::hsyncnet</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::hsyncnet</Scope>
    </TokenIdentifier>
    <Path>d8/d52/namespacepyclustering_1_1cluster_1_1hsyncnet.html</Path>
    <Abstract>Cluster analysis algorithm: Hierarchical Sync (HSyncNet) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::hsyncnet::hsyncnet</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.hsyncnet.hsyncnet</Scope>
    </TokenIdentifier>
    <Path>d5/d0a/classpyclustering_1_1cluster_1_1hsyncnet_1_1hsyncnet.html</Path>
    <Abstract>Class represents clustering algorithm HSyncNet. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.hsyncnet.hsyncnet</Scope>
    </TokenIdentifier>
    <Path>d5/d0a/classpyclustering_1_1cluster_1_1hsyncnet_1_1hsyncnet.html</Path>
    <Anchor>ad7633ee99da2f1c315516399c26a2540</Anchor>
    <Abstract>Costructor of the oscillatory network hSyncNet for cluster analysis. </Abstract>
    <DeclaredIn>hsyncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.hsyncnet.hsyncnet</Scope>
    </TokenIdentifier>
    <Path>d5/d0a/classpyclustering_1_1cluster_1_1hsyncnet_1_1hsyncnet.html</Path>
    <Anchor>aca6cb01f834918b9583c02392b35b918</Anchor>
    <Abstract>Destructor of oscillatory network HSyncNet. </Abstract>
    <DeclaredIn>hsyncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.hsyncnet.hsyncnet</Scope>
    </TokenIdentifier>
    <Path>d5/d0a/classpyclustering_1_1cluster_1_1hsyncnet_1_1hsyncnet.html</Path>
    <Anchor>a5873faf32ba393e7b9fe6e3e863422b2</Anchor>
    <Abstract>Performs clustering of input data set in line with input parameters. </Abstract>
    <DeclaredIn>hsyncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>a0e6e949500b64efda008cb66a01e8ccc</Anchor>
    <Abstract>Contructor of the oscillatory network SYNC for cluster analysis. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>a17ac8345733ca0f2fcc4f71aabc88276</Anchor>
    <Abstract>Destructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>a86e4668588cd559eaded1e653284c819</Anchor>
    <Abstract>Peforms cluster analysis using simulation of the oscillatory network. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_network</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>ad21643add8473cda2684187475933739</Anchor>
    <Abstract>Shows connections in the network. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a6c559dfa166ad2ff2ae4bfceb8ee7ffc</Anchor>
    <Abstract>Constructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a9252c8e7c094aea2ffd6494df8c63ee8</Anchor>
    <Abstract>Destructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ae1cae6c1af46d4617b7c3561b38a2d24</Anchor>
    <Abstract>Calculates current level of global synchorization (order parameter) in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_local_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>adbc01ffd91284cad3a2f06da0b399805</Anchor>
    <Abstract>Calculates current level of local (partial) synchronization in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a3acee8446ba88cfbc400ed0d326d0191</Anchor>
    <Abstract>Performs static simulation of Sync oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ab4d1e9c5af1a761b0ee9f3d7814c9e4e</Anchor>
    <Abstract>Performs dynamic simulation of the network until stop condition is not reached. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ad1d77b799a8113316532254008bc60c4</Anchor>
    <Abstract>Performs static simulation of oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a48bfa8764203f8e0ae1bf5353134df2d</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a2c38c23193f77cfde9f989197297151e</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmeans</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d97/namespacepyclustering_1_1cluster_1_1kmeans.html</Path>
    <Abstract>The module contains K-Means algorithm and other related services. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmeans::kmeans</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Abstract>Class implements K-Means clustering algorithm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Anchor>a24cb16d166a249735bd89c6448182224</Anchor>
    <Abstract>Constructor of clustering algorithm K-Means. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Anchor>a418d9677feee94ec428a3e684c9000cf</Anchor>
    <Abstract>Performs cluster analysis in line with rules of K-Means algorithm. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>predict</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Anchor>a61cbab91270df20ce6af8a8daf99bd81</Anchor>
    <Abstract>Calculates the closest cluster to each point. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Anchor>a06ddf4b7a07c576201892a5bfff3b0d8</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_centers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Anchor>acbdd0acd8f3ebe9f7f3e3a80ccf1e7c9</Anchor>
    <Abstract>Returns list of centers of allocated clusters. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_total_wce</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Anchor>acd64270946b76b7c7a3436c79d1bf309</Anchor>
    <Abstract>Returns sum of metric errors that depends on metric that was used for clustering (by default SSE - Su...</Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans</Scope>
    </TokenIdentifier>
    <Path>da/d22/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans.html</Path>
    <Anchor>a773c47e27b1687b1acac2dfea07c3fe8</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmeans::kmeans_observer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Abstract>Observer of K-Means algorithm that is used to collect information about clustering process on each it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Anchor>a15cadaf786e9f0d0fa3210e978bc245d</Anchor>
    <Abstract>Initializer of observer of K-Means algorithm. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Anchor>a895b3ab795335f88bc9cb9713910f900</Anchor>
    <Abstract>Returns amount of steps that were observer during clustering process in K-Means algorithm. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>notify</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Anchor>abe04fd8cf15ef2c184303a11fef6e0ca</Anchor>
    <Abstract>This method is called by K-Means algorithm to notify about changes. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_evolution_centers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Anchor>a4803ed23e7247f75dc84b5b71ae98c78</Anchor>
    <Abstract>Set evolution of changes of centers during clustering process. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_centers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Anchor>aae151de22cb52178cb48b5b7738bb08e</Anchor>
    <Abstract>Get method to return centers at specific iteration of clustering process. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_evolution_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Anchor>aa750f7d4e3fd708c56bc106cd463a47c</Anchor>
    <Abstract>Set evolution of changes of centers during clustering process. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_observer</Scope>
    </TokenIdentifier>
    <Path>d1/dc5/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__observer.html</Path>
    <Anchor>a9ec9de94571bfd01de393e0a7919b43e</Anchor>
    <Abstract>Get method to return allocated clusters at specific iteration of clustering process. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmeans::kmeans_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_visualizer</Scope>
    </TokenIdentifier>
    <Path>db/d6d/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__visualizer.html</Path>
    <Abstract>Visualizer of K-Means algorithm&amp;#39;s results. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_visualizer</Scope>
    </TokenIdentifier>
    <Path>db/d6d/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__visualizer.html</Path>
    <Anchor>ac683138a0b23d10481a1515bf2f6d16f</Anchor>
    <Abstract>Display K-Means clustering results. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_cluster_allocation</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.kmeans.kmeans_visualizer</Scope>
    </TokenIdentifier>
    <Path>db/d6d/classpyclustering_1_1cluster_1_1kmeans_1_1kmeans__visualizer.html</Path>
    <Anchor>a29c0f45a81ebeb560baaa1bca49f8379</Anchor>
    <Abstract>Animates clustering process that is performed by K-Means algorithm. </Abstract>
    <DeclaredIn>kmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmedians</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::kmedians</Scope>
    </TokenIdentifier>
    <Path>d6/d8c/namespacepyclustering_1_1cluster_1_1kmedians.html</Path>
    <Abstract>Cluster analysis algorithm: K-Medians. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmedians::kmedians</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Abstract>Class represents clustering algorithm K-Medians. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Anchor>a02ff99826f68d56f4ee96baafae19bcf</Anchor>
    <Abstract>Constructor of clustering algorithm K-Medians. </Abstract>
    <DeclaredIn>kmedians.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Anchor>a81ccf68ae83dd9ed75103cc4237bf063</Anchor>
    <Abstract>Performs cluster analysis in line with rules of K-Medians algorithm. </Abstract>
    <DeclaredIn>kmedians.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>predict</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Anchor>a60269f72ae95f1ae759405bea32665a2</Anchor>
    <Abstract>Calculates the closest cluster to each point. </Abstract>
    <DeclaredIn>kmedians.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Anchor>ac2235bcb062f381ec1765a8cc8e18b69</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>kmedians.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_medians</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Anchor>a822336531cf3ceefb3f504dc78dccf2b</Anchor>
    <Abstract>Returns list of centers of allocated clusters. </Abstract>
    <DeclaredIn>kmedians.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_total_wce</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Anchor>adcbd41198ae85d9204d25982df34d960</Anchor>
    <Abstract>Returns sum of metric errors that depends on metric that was used for clustering (by default SSE - Su...</Abstract>
    <DeclaredIn>kmedians.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedians.kmedians</Scope>
    </TokenIdentifier>
    <Path>df/d68/classpyclustering_1_1cluster_1_1kmedians_1_1kmedians.html</Path>
    <Anchor>a74700cf2e615ecb8abf3b34f508278ea</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>kmedians.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmedoids</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::kmedoids</Scope>
    </TokenIdentifier>
    <Path>de/dfd/namespacepyclustering_1_1cluster_1_1kmedoids.html</Path>
    <Abstract>Cluster analysis algorithm: K-Medoids. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::kmedoids::kmedoids</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.kmedoids.kmedoids</Scope>
    </TokenIdentifier>
    <Path>d0/dd3/classpyclustering_1_1cluster_1_1kmedoids_1_1kmedoids.html</Path>
    <Abstract>Class represents clustering algorithm K-Medoids. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedoids.kmedoids</Scope>
    </TokenIdentifier>
    <Path>d0/dd3/classpyclustering_1_1cluster_1_1kmedoids_1_1kmedoids.html</Path>
    <Anchor>a698b7a2df2358221e705012973df44a6</Anchor>
    <Abstract>Constructor of clustering algorithm K-Medoids. </Abstract>
    <DeclaredIn>kmedoids.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedoids.kmedoids</Scope>
    </TokenIdentifier>
    <Path>d0/dd3/classpyclustering_1_1cluster_1_1kmedoids_1_1kmedoids.html</Path>
    <Anchor>a1978fa682c26feebba2ded65ac478768</Anchor>
    <Abstract>Performs cluster analysis in line with rules of K-Medoids algorithm. </Abstract>
    <DeclaredIn>kmedoids.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>predict</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedoids.kmedoids</Scope>
    </TokenIdentifier>
    <Path>d0/dd3/classpyclustering_1_1cluster_1_1kmedoids_1_1kmedoids.html</Path>
    <Anchor>acab1d313b1c0afd59c3adee72a8fa68b</Anchor>
    <Abstract>Calculates the closest cluster to each point. </Abstract>
    <DeclaredIn>kmedoids.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedoids.kmedoids</Scope>
    </TokenIdentifier>
    <Path>d0/dd3/classpyclustering_1_1cluster_1_1kmedoids_1_1kmedoids.html</Path>
    <Anchor>aaea9e022dc688acbb7bfff7c993fb84f</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>kmedoids.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_medoids</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedoids.kmedoids</Scope>
    </TokenIdentifier>
    <Path>d0/dd3/classpyclustering_1_1cluster_1_1kmedoids_1_1kmedoids.html</Path>
    <Anchor>a5bb016085f13edf26f46834dbc9855d7</Anchor>
    <Abstract>Returns list of medoids of allocated clusters represented by indexes from the input data...</Abstract>
    <DeclaredIn>kmedoids.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.kmedoids.kmedoids</Scope>
    </TokenIdentifier>
    <Path>d0/dd3/classpyclustering_1_1cluster_1_1kmedoids_1_1kmedoids.html</Path>
    <Anchor>a368ecae21ba8fabc43487d5d72fcc97e</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>kmedoids.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::mbsas</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::mbsas</Scope>
    </TokenIdentifier>
    <Path>db/df5/namespacepyclustering_1_1cluster_1_1mbsas.html</Path>
    <Abstract>Cluster analysis algorithm: MBSAS (Modified Basic Sequential Algorithmic Scheme). ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::mbsas::mbsas</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.mbsas.mbsas</Scope>
    </TokenIdentifier>
    <Path>da/da9/classpyclustering_1_1cluster_1_1mbsas_1_1mbsas.html</Path>
    <Abstract>Class represents MBSAS (Modified Basic Sequential Algorithmic Scheme). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.mbsas.mbsas</Scope>
    </TokenIdentifier>
    <Path>da/da9/classpyclustering_1_1cluster_1_1mbsas_1_1mbsas.html</Path>
    <Anchor>ad9cba14adadc71c4304df276f3cbb95e</Anchor>
    <Abstract>Creates MBSAS algorithm. </Abstract>
    <DeclaredIn>mbsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.mbsas.mbsas</Scope>
    </TokenIdentifier>
    <Path>da/da9/classpyclustering_1_1cluster_1_1mbsas_1_1mbsas.html</Path>
    <Anchor>aff8613ecbe284a9ac76aee99fb69c598</Anchor>
    <Abstract>Performs cluster analysis in line with MBSAS algorithm. </Abstract>
    <DeclaredIn>mbsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a3cd78076d880c5f4a6ab4b1e53ec6336</Anchor>
    <Abstract>Creates classical BSAS algorithm. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>ae520f1bc37bfc7931c506a6ab1c2df55</Anchor>
    <Abstract>Performs cluster analysis in line with rules of BSAS algorithm. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>aacbc424e284050a97cdf4766d106c86c</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_representatives</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a97cd2de640920bb78062555d162c7c25</Anchor>
    <Abstract>Returns list of representatives of allocated clusters. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a980be5c347fd8e72500f62990e5b6ee2</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::optics</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::optics</Scope>
    </TokenIdentifier>
    <Path>d3/d6a/namespacepyclustering_1_1cluster_1_1optics.html</Path>
    <Abstract>Cluster analysis algorithm: OPTICS (Ordering Points To Identify Clustering Structure) ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::optics::optics</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Abstract>Class represents clustering algorithm OPTICS (Ordering Points To Identify Clustering Structure) with ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>a5019996d847c1054c026080fb8e1b4cb</Anchor>
    <Abstract>Constructor of clustering algorithm OPTICS. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>a499a946349ca2935dcae917b9610df4e</Anchor>
    <Abstract>Performs cluster analysis in line with rules of OPTICS algorithm. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>a1de40e28353b5134145d6b4e17df70df</Anchor>
    <Abstract>Returns list of allocated clusters, where each cluster contains indexes of objects and each cluster i...</Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_noise</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>a96a51c0a7c855cb7034398e1ceb4c09a</Anchor>
    <Abstract>Returns list of noise that contains indexes of objects that corresponds to input data. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_ordering</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>aaf338d85934d42a764782c4a9e848eb0</Anchor>
    <Abstract>Returns clustering ordering information about the input data set. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_optics_objects</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>ae1cd6dbabdf6abfe455f67ce510f563f</Anchor>
    <Abstract>Returns OPTICS objects where each object contains information about index of point from processed dat...</Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_radius</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>a22d9087055db87849460d82d5f71bffe</Anchor>
    <Abstract>Returns connectivity radius that is calculated and used for clustering by the algorithm. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics</Scope>
    </TokenIdentifier>
    <Path>de/d3b/classpyclustering_1_1cluster_1_1optics_1_1optics.html</Path>
    <Anchor>a9f547819e427545f3ed269cb34be926d</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::optics::optics_descriptor</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.optics.optics_descriptor</Scope>
    </TokenIdentifier>
    <Path>df/d0f/classpyclustering_1_1cluster_1_1optics_1_1optics__descriptor.html</Path>
    <Abstract>Object description that used by OPTICS algorithm for cluster analysis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics_descriptor</Scope>
    </TokenIdentifier>
    <Path>df/d0f/classpyclustering_1_1cluster_1_1optics_1_1optics__descriptor.html</Path>
    <Anchor>abb699b243be56404fc79fb0e5b2613bf</Anchor>
    <Abstract>Constructor of object description in optics terms. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.optics_descriptor</Scope>
    </TokenIdentifier>
    <Path>df/d0f/classpyclustering_1_1cluster_1_1optics_1_1optics__descriptor.html</Path>
    <Anchor>aef5e2d7728901004ab016ccb7f8d186e</Anchor>
    <Abstract>Returns string representation of the optics descriptor. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>index_object</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.optics.optics_descriptor</Scope>
    </TokenIdentifier>
    <Path>df/d0f/classpyclustering_1_1cluster_1_1optics_1_1optics__descriptor.html</Path>
    <Anchor>a1edbd4bbdddd0d9ff88516b9a690b1f7</Anchor>
    <Abstract>Index of object from the input data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.optics.optics_descriptor</Scope>
    </TokenIdentifier>
    <Path>df/d0f/classpyclustering_1_1cluster_1_1optics_1_1optics__descriptor.html</Path>
    <Anchor>a374035ec1ea60f2e51063fae3d7a9768</Anchor>
    <Abstract>Core distance - the smallest distance to reach specified number of neighbors that is not greater then...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reachability_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.optics.optics_descriptor</Scope>
    </TokenIdentifier>
    <Path>df/d0f/classpyclustering_1_1cluster_1_1optics_1_1optics__descriptor.html</Path>
    <Anchor>aef251b4fdaee9e9e439240db6c560e42</Anchor>
    <Abstract>Reachability distance - the smallest distance to be reachable by core object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>processed</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.optics.optics_descriptor</Scope>
    </TokenIdentifier>
    <Path>df/d0f/classpyclustering_1_1cluster_1_1optics_1_1optics__descriptor.html</Path>
    <Anchor>ad91667526874ded5c4355f7067ec024b</Anchor>
    <Abstract>True is object has been already traversed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::optics::ordering_analyser</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.optics.ordering_analyser</Scope>
    </TokenIdentifier>
    <Path>d9/db3/classpyclustering_1_1cluster_1_1optics_1_1ordering__analyser.html</Path>
    <Abstract>Analyser of cluster ordering diagram. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cluster_ordering</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.ordering_analyser</Scope>
    </TokenIdentifier>
    <Path>d9/db3/classpyclustering_1_1cluster_1_1optics_1_1ordering__analyser.html</Path>
    <Anchor>a9daf3ff9e1775960168be4345361c102</Anchor>
    <Abstract>(list) Returns values of dataset cluster ordering. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.ordering_analyser</Scope>
    </TokenIdentifier>
    <Path>d9/db3/classpyclustering_1_1cluster_1_1optics_1_1ordering__analyser.html</Path>
    <Anchor>a29bf139697c154f22cb542d9d7945c67</Anchor>
    <Abstract>Analyser of ordering diagram that is based on reachability-distances. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.ordering_analyser</Scope>
    </TokenIdentifier>
    <Path>d9/db3/classpyclustering_1_1cluster_1_1optics_1_1ordering__analyser.html</Path>
    <Anchor>a28ececb319cb276b1e69bc3f762aec90</Anchor>
    <Abstract>Returns length of clustering-ordering diagram. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_connvectivity_radius</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.ordering_analyser</Scope>
    </TokenIdentifier>
    <Path>d9/db3/classpyclustering_1_1cluster_1_1optics_1_1ordering__analyser.html</Path>
    <Anchor>aa519ba6e789ba0ffe98df8f1b9434318</Anchor>
    <Abstract>Calculates connectivity radius of allocation specified amount of clusters using ordering diagram and ...</Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extract_cluster_amount</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.optics.ordering_analyser</Scope>
    </TokenIdentifier>
    <Path>d9/db3/classpyclustering_1_1cluster_1_1optics_1_1ordering__analyser.html</Path>
    <Anchor>ac58a6d2cb80809dcb73f81aa3505b5e1</Anchor>
    <Abstract>Obtains amount of clustering that can be allocated by using specified radius for ordering diagram and...</Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::optics::ordering_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.optics.ordering_visualizer</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1optics_1_1ordering__visualizer.html</Path>
    <Abstract>Cluster ordering diagram visualizer that represents dataset graphically as density-based clustering s...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_ordering_diagram</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.optics.ordering_visualizer</Scope>
    </TokenIdentifier>
    <Path>d2/d42/classpyclustering_1_1cluster_1_1optics_1_1ordering__visualizer.html</Path>
    <Anchor>add3a3884ca8995cd6ec929a4abb8d759</Anchor>
    <Abstract>Display cluster-ordering (reachability-plot) diagram. </Abstract>
    <DeclaredIn>optics.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::rock</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::rock</Scope>
    </TokenIdentifier>
    <Path>da/dcd/namespacepyclustering_1_1cluster_1_1rock.html</Path>
    <Abstract>Cluster analysis algorithm: ROCK. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::rock::rock</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.rock.rock</Scope>
    </TokenIdentifier>
    <Path>d8/dde/classpyclustering_1_1cluster_1_1rock_1_1rock.html</Path>
    <Abstract>Class represents clustering algorithm ROCK. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.rock.rock</Scope>
    </TokenIdentifier>
    <Path>d8/dde/classpyclustering_1_1cluster_1_1rock_1_1rock.html</Path>
    <Anchor>a80e354f4a8c5ae7899ad78a95b6458c1</Anchor>
    <Abstract>Constructor of clustering algorithm ROCK. </Abstract>
    <DeclaredIn>rock.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.rock.rock</Scope>
    </TokenIdentifier>
    <Path>d8/dde/classpyclustering_1_1cluster_1_1rock_1_1rock.html</Path>
    <Anchor>aec16a1385f479f52dc9a5b5b8929e44f</Anchor>
    <Abstract>Performs cluster analysis in line with rules of ROCK algorithm. </Abstract>
    <DeclaredIn>rock.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.rock.rock</Scope>
    </TokenIdentifier>
    <Path>d8/dde/classpyclustering_1_1cluster_1_1rock_1_1rock.html</Path>
    <Anchor>ad392f405005326c06aa5bf4d8280a222</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>rock.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.rock.rock</Scope>
    </TokenIdentifier>
    <Path>d8/dde/classpyclustering_1_1cluster_1_1rock_1_1rock.html</Path>
    <Anchor>a44e4ea4a0c564ae9d3c3cb1454da16c8</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>rock.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::silhouette</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::silhouette</Scope>
    </TokenIdentifier>
    <Path>d5/d62/namespacepyclustering_1_1cluster_1_1silhouette.html</Path>
    <Abstract>Silhouette - method of interpretation and validation of consistency. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::silhouette::silhouette</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette</Scope>
    </TokenIdentifier>
    <Path>d8/db1/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette.html</Path>
    <Abstract>Represents Silhouette method that is used interpretation and validation of consistency. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette</Scope>
    </TokenIdentifier>
    <Path>d8/db1/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette.html</Path>
    <Anchor>a7668a99e719e4b1c6ad81b18849f9836</Anchor>
    <Abstract>Initializes Silhouette method for analysis. </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette</Scope>
    </TokenIdentifier>
    <Path>d8/db1/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette.html</Path>
    <Anchor>a845b41d2e6d514efb17ec031f6f4ca11</Anchor>
    <Abstract>Calculates Silhouette score for each object from input data. </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_score</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette</Scope>
    </TokenIdentifier>
    <Path>d8/db1/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette.html</Path>
    <Anchor>a517717587c712ecd9e1d292ea10d507b</Anchor>
    <Abstract>Returns Silhouette score for each object from input data. </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::silhouette::silhouette_ksearch</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch</Scope>
    </TokenIdentifier>
    <Path>d4/d84/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch.html</Path>
    <Abstract>Represent algorithm for searching optimal number of clusters using specified K-algorithm (K-Means...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch</Scope>
    </TokenIdentifier>
    <Path>d4/d84/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch.html</Path>
    <Anchor>a74c9cf495dad95e5b9c273680c90be76</Anchor>
    <Abstract>Initialize Silhouette search algorithm to find out optimal amount of clusters. </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch</Scope>
    </TokenIdentifier>
    <Path>d4/d84/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch.html</Path>
    <Anchor>a0475ba817d3b8dc83953d5834f30434d</Anchor>
    <Abstract>Performs analysis to find optimal amount of clusters. </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_amount</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch</Scope>
    </TokenIdentifier>
    <Path>d4/d84/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch.html</Path>
    <Anchor>ac80bcbf56bc4f96457e7c98e3c20d795</Anchor>
    <Abstract>Returns optimal amount of clusters that has been found during analysis. </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_score</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch</Scope>
    </TokenIdentifier>
    <Path>d4/d84/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch.html</Path>
    <Anchor>a7a341f133c5946abe4b40bf74bd6457e</Anchor>
    <Abstract>Returns silhouette score that belongs to optimal amount of clusters (k). </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_scores</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch</Scope>
    </TokenIdentifier>
    <Path>d4/d84/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch.html</Path>
    <Anchor>a80768a7f3c8437c4d322d30ddd545182</Anchor>
    <Abstract>Returns silhouette score for each K value (amount of clusters). </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::silhouette::silhouette_ksearch_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch_type</Scope>
    </TokenIdentifier>
    <Path>db/d80/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch__type.html</Path>
    <Abstract>Defines algorithms that can be used to find optimal number of cluster using Silhouette method...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_type</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch_type</Scope>
    </TokenIdentifier>
    <Path>db/d80/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch__type.html</Path>
    <Anchor>ab587b5a04a19357fdf59fcc7f132ad47</Anchor>
    <Abstract>Returns algorithm type that corresponds to specified enumeration value. </Abstract>
    <DeclaredIn>silhouette.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>KMEANS</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch_type</Scope>
    </TokenIdentifier>
    <Path>db/d80/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch__type.html</Path>
    <Anchor>a7af7410bb2da5e5d43e208426118f7b5</Anchor>
    <Abstract>K-Means algorithm for searching optimal number of clusters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>KMEDIANS</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch_type</Scope>
    </TokenIdentifier>
    <Path>db/d80/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch__type.html</Path>
    <Anchor>a6bc422a74a41714d8fe4f67f2a45f551</Anchor>
    <Abstract>K-Medians algorithm for searching optimal number of clusters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>KMEDOIDS</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.silhouette.silhouette_ksearch_type</Scope>
    </TokenIdentifier>
    <Path>db/d80/classpyclustering_1_1cluster_1_1silhouette_1_1silhouette__ksearch__type.html</Path>
    <Anchor>a6a939ec40e99493086c1223d935b3843</Anchor>
    <Abstract>K-Medoids algorithm for searching optimal number of clusters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::somsc</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::somsc</Scope>
    </TokenIdentifier>
    <Path>d6/d52/namespacepyclustering_1_1cluster_1_1somsc.html</Path>
    <Abstract>Cluster analysis algorithm: SOM-SC (Self-Organized Feature Map for Simple Clustering) ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::somsc::somsc</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.somsc.somsc</Scope>
    </TokenIdentifier>
    <Path>d3/d44/classpyclustering_1_1cluster_1_1somsc_1_1somsc.html</Path>
    <Abstract>Class represents simple clustering algorithm based on self-organized feature map. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.somsc.somsc</Scope>
    </TokenIdentifier>
    <Path>d3/d44/classpyclustering_1_1cluster_1_1somsc_1_1somsc.html</Path>
    <Anchor>af9305115b833cb4b159f0a351f6dbdb6</Anchor>
    <Abstract>Creates SOM-SC (Self Organized Map for Simple Clustering) algorithm for clustering analysis...</Abstract>
    <DeclaredIn>somsc.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.somsc.somsc</Scope>
    </TokenIdentifier>
    <Path>d3/d44/classpyclustering_1_1cluster_1_1somsc_1_1somsc.html</Path>
    <Anchor>a39c9748e92e56ad128a20ad5a9f2d7d6</Anchor>
    <Abstract>Performs cluster analysis by competition between neurons of SOM. </Abstract>
    <DeclaredIn>somsc.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>predict</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.somsc.somsc</Scope>
    </TokenIdentifier>
    <Path>d3/d44/classpyclustering_1_1cluster_1_1somsc_1_1somsc.html</Path>
    <Anchor>ab878f6a863b40605956fcec27d40b24d</Anchor>
    <Abstract>Calculates the closest cluster to each point. </Abstract>
    <DeclaredIn>somsc.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.somsc.somsc</Scope>
    </TokenIdentifier>
    <Path>d3/d44/classpyclustering_1_1cluster_1_1somsc_1_1somsc.html</Path>
    <Anchor>a0c357bd335c46784f4ebef159b1a1e6b</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>somsc.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.somsc.somsc</Scope>
    </TokenIdentifier>
    <Path>d3/d44/classpyclustering_1_1cluster_1_1somsc_1_1somsc.html</Path>
    <Anchor>ad3c63524e61d5ef404643c7067165b7b</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>somsc.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::syncnet</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::syncnet</Scope>
    </TokenIdentifier>
    <Path>de/d8b/namespacepyclustering_1_1cluster_1_1syncnet.html</Path>
    <Abstract>Cluster analysis algorithm: Sync. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::syncnet::syncnet</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Abstract>Class represents clustering algorithm SyncNet. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>a0e6e949500b64efda008cb66a01e8ccc</Anchor>
    <Abstract>Contructor of the oscillatory network SYNC for cluster analysis. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>a17ac8345733ca0f2fcc4f71aabc88276</Anchor>
    <Abstract>Destructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>a86e4668588cd559eaded1e653284c819</Anchor>
    <Abstract>Peforms cluster analysis using simulation of the oscillatory network. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_network</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet</Scope>
    </TokenIdentifier>
    <Path>d4/d98/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet.html</Path>
    <Anchor>ad21643add8473cda2684187475933739</Anchor>
    <Abstract>Shows connections in the network. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a6c559dfa166ad2ff2ae4bfceb8ee7ffc</Anchor>
    <Abstract>Constructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a9252c8e7c094aea2ffd6494df8c63ee8</Anchor>
    <Abstract>Destructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ae1cae6c1af46d4617b7c3561b38a2d24</Anchor>
    <Abstract>Calculates current level of global synchorization (order parameter) in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_local_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>adbc01ffd91284cad3a2f06da0b399805</Anchor>
    <Abstract>Calculates current level of local (partial) synchronization in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a3acee8446ba88cfbc400ed0d326d0191</Anchor>
    <Abstract>Performs static simulation of Sync oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ab4d1e9c5af1a761b0ee9f3d7814c9e4e</Anchor>
    <Abstract>Performs dynamic simulation of the network until stop condition is not reached. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ad1d77b799a8113316532254008bc60c4</Anchor>
    <Abstract>Performs static simulation of oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a48bfa8764203f8e0ae1bf5353134df2d</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a2c38c23193f77cfde9f989197297151e</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::syncnet::syncnet_analyser</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d8f/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet__analyser.html</Path>
    <Abstract>Performs analysis of output dynamic of the oscillatory network syncnet to extract information about c...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d8f/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet__analyser.html</Path>
    <Anchor>ad5ecd2c0f603a2e8faf26586ced501bb</Anchor>
    <Abstract>Constructor of the analyser. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d8f/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet__analyser.html</Path>
    <Anchor>a98947bd8c8f01c2e744b33609f1cf267</Anchor>
    <Abstract>Desctructor of the analyser. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d8f/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet__analyser.html</Path>
    <Anchor>acf9b2481c2cef5da8fd5887eda806032</Anchor>
    <Abstract>Returns list of clusters in line with state of ocillators (phases). </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d8f/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet__analyser.html</Path>
    <Anchor>a3768efabc07f9849a84b1e0dbff5658e</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a218702c7c078387e54bb8ea94a81a818</Anchor>
    <Abstract>(list) Returns output dynamic of the Sync network (phase coordinates of each oscillator in the networ...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a91fdb6b0efab62a7c8a046ea45b49d44</Anchor>
    <Abstract>(list) Returns sampling times when dynamic is measured during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a99376c9fe25182c5fba1ca3e5116349d</Anchor>
    <Abstract>Constructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a2c08fb4d750f456fef48afeddc0daeb0</Anchor>
    <Abstract>Default destructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aacc3380b1a85eab88c13fe237c1e0dfa</Anchor>
    <Abstract>Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__getitem__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a14746ba3c7b2eaad75f84754c1088f77</Anchor>
    <Abstract>Indexing of the dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a4f3c8155c31a1e6df48d3455e3f9cc54</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>ac1095b7b3e5597eff50b23b02c5a6c8b</Anchor>
    <Abstract>Returns 2D matrix of phase values of oscillators at the specified iteration of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a225da35991a7ab5fa5922d0194e8b729</Anchor>
    <Abstract>Allocate correlation matrix between oscillators at the specified step of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aa7785daff161a5f5e359699699880f84</Anchor>
    <Abstract>Calculates level of global synchorization (order parameter). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_local_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>af4ba96d7adf1c0786340d295489374a0</Anchor>
    <Abstract>Calculates local order parameter. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::syncnet::syncnet_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/d85/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet__visualizer.html</Path>
    <Abstract>Visualizer of output dynamic of oscillatory network &amp;#39;syncnet&amp;#39; for cluster analysis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_cluster_allocation</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.cluster.syncnet.syncnet_visualizer</Scope>
    </TokenIdentifier>
    <Path>d5/d85/classpyclustering_1_1cluster_1_1syncnet_1_1syncnet__visualizer.html</Path>
    <Anchor>a3e8c3bb706f49f45946f719d4c8325d8</Anchor>
    <Abstract>Shows animation of output dynamic (output of each oscillator) during simulation on a circle from [0; ...</Abstract>
    <DeclaredIn>syncnet.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aaf74d851a03b8a5b0f05ec36918642c8</Anchor>
    <Abstract>Shows output dynamic (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamics</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aece8f22f0fce2276360981a3e9765054</Anchor>
    <Abstract>Shows several output dynamics (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aa52476f3d9f38a326ba0bf56ca3c44de</Anchor>
    <Abstract>Shows correlation matrix between oscillators at the specified iteration. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a5c4f345375c308120cd57a21e4f9ae57</Anchor>
    <Abstract>Shows 2D matrix of phase values of oscillators at the specified iteration. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a60b627a2d0e133d7786ad9f3a1e66f7a</Anchor>
    <Abstract>Shows evolution of order parameter (level of global synchronization in the network). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_local_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a3264d951231a526b3182d6ba5e40954e</Anchor>
    <Abstract>Shows evolution of local order parameter (level of local synchronization in the network). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aea4b9f69e01001a73bc6fc5c6bf1ef8d</Anchor>
    <Abstract>Shows animation of output dynamic (output of each oscillator) during simulation on a circle from [0; ...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a98db73bd2c831c23d3fed89eaa9e711d</Anchor>
    <Abstract>Shows animation of correlation matrix between oscillators during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a70724b4778055b15ce050efad5cc1b6c</Anchor>
    <Abstract>Shows animation of phase matrix between oscillators during simulation on 2D stage. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a5273393929a41400f8d99c21755bd857</Anchor>
    <Abstract>Shows animation of phase coordinates and animation of correlation matrix together for the Sync dynami...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::syncsom</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::syncsom</Scope>
    </TokenIdentifier>
    <Path>d0/dc7/namespacepyclustering_1_1cluster_1_1syncsom.html</Path>
    <Abstract>Cluster analysis algorithm: SYNC-SOM. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::syncsom::syncsom</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Abstract>Class represents clustering algorithm SYNC-SOM. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>som_layer</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>a87094ef495381a253cbfbe1148c2712d</Anchor>
    <Abstract>The first layer of the oscillatory network - self-organized feature map. </Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_layer</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>a79e62249f4c16a21f0cba09987dab785</Anchor>
    <Abstract>The second layer of the oscillatory network based on Kuramoto model. </Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>af0b829c88328a3d92228cb1184fb12c6</Anchor>
    <Abstract>Constructor of the double layer oscillatory network SYNC-SOM. </Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>af297ae4be5a9c193751b5befb7c0b981</Anchor>
    <Abstract>Performs simulation of the oscillatory network. </Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_som_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>a098093a0882ffb0dc4e7afaf1b607822</Anchor>
    <Abstract>Returns clusters with SOM neurons that encode input features in line with result of synchronization i...</Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>ade26328129adae90dd0178f9cbe9cec0</Anchor>
    <Abstract>Returns clusters in line with ensembles of synchronous oscillators where each synchronous ensemble co...</Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>ab5159dfd7f9c20f570afb7dab215ab27</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_som_layer</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>acf3db901ffc458b15feff62c2f8b5417</Anchor>
    <Abstract>Shows visual representation of the first (SOM) layer. </Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_sync_layer</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.syncsom.syncsom</Scope>
    </TokenIdentifier>
    <Path>d8/d46/classpyclustering_1_1cluster_1_1syncsom_1_1syncsom.html</Path>
    <Anchor>a261a363834e33cb334f7f79e89405654</Anchor>
    <Abstract>Shows visual representation of the second (Sync) layer. </Abstract>
    <DeclaredIn>syncsom.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ttsas</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::ttsas</Scope>
    </TokenIdentifier>
    <Path>d4/de1/namespacepyclustering_1_1cluster_1_1ttsas.html</Path>
    <Abstract>Cluster analysis algorithm: TTSAS (Two-Threshold Sequential Algorithmic Scheme). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::ttsas::ttsas</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.ttsas.ttsas</Scope>
    </TokenIdentifier>
    <Path>df/db9/classpyclustering_1_1cluster_1_1ttsas_1_1ttsas.html</Path>
    <Abstract>Class represents TTSAS (Two-Threshold Sequential Algorithmic Scheme). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ttsas.ttsas</Scope>
    </TokenIdentifier>
    <Path>df/db9/classpyclustering_1_1cluster_1_1ttsas_1_1ttsas.html</Path>
    <Anchor>aa88151f193530fe87fec7ca9c550bc3d</Anchor>
    <Abstract>Creates TTSAS algorithm. </Abstract>
    <DeclaredIn>ttsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.ttsas.ttsas</Scope>
    </TokenIdentifier>
    <Path>df/db9/classpyclustering_1_1cluster_1_1ttsas_1_1ttsas.html</Path>
    <Anchor>af04ea08e4b688fbba449260819990441</Anchor>
    <Abstract>Performs cluster analysis in line with rules of TTSAS algorithm. </Abstract>
    <DeclaredIn>ttsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a3cd78076d880c5f4a6ab4b1e53ec6336</Anchor>
    <Abstract>Creates classical BSAS algorithm. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>ae520f1bc37bfc7931c506a6ab1c2df55</Anchor>
    <Abstract>Performs cluster analysis in line with rules of BSAS algorithm. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>aacbc424e284050a97cdf4766d106c86c</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_representatives</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a97cd2de640920bb78062555d162c7c25</Anchor>
    <Abstract>Returns list of representatives of allocated clusters. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.bsas.bsas</Scope>
    </TokenIdentifier>
    <Path>db/d8b/classpyclustering_1_1cluster_1_1bsas_1_1bsas.html</Path>
    <Anchor>a980be5c347fd8e72500f62990e5b6ee2</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>bsas.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::xmeans</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::cluster::xmeans</Scope>
    </TokenIdentifier>
    <Path>d2/d8b/namespacepyclustering_1_1cluster_1_1xmeans.html</Path>
    <Abstract>Cluster analysis algorithm: X-Means. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::xmeans::splitting_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.xmeans.splitting_type</Scope>
    </TokenIdentifier>
    <Path>dc/d4b/classpyclustering_1_1cluster_1_1xmeans_1_1splitting__type.html</Path>
    <Abstract>Enumeration of splitting types that can be used as splitting creation of cluster in X-Means algorithm...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BAYESIAN_INFORMATION_CRITERION</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.xmeans.splitting_type</Scope>
    </TokenIdentifier>
    <Path>dc/d4b/classpyclustering_1_1cluster_1_1xmeans_1_1splitting__type.html</Path>
    <Anchor>ac07b3fbd882d3e7dc45b171b37ef1e28</Anchor>
    <Abstract>Bayesian information criterion (BIC) to approximate the correct number of clusters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MINIMUM_NOISELESS_DESCRIPTION_LENGTH</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.cluster.xmeans.splitting_type</Scope>
    </TokenIdentifier>
    <Path>dc/d4b/classpyclustering_1_1cluster_1_1xmeans_1_1splitting__type.html</Path>
    <Anchor>a9c0779de2a55093fe0261194d8489c5c</Anchor>
    <Abstract>Minimum noiseless description length (MNDL) to approximate the correct number of clusters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::cluster::xmeans::xmeans</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Abstract>Class represents clustering algorithm X-Means. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Anchor>ac1295ee6b60a025c1b98ec597b7d66d8</Anchor>
    <Abstract>Constructor of clustering algorithm X-Means. </Abstract>
    <DeclaredIn>xmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Anchor>a4d2456ea5019ae8047d3fd6168c9115d</Anchor>
    <Abstract>Performs cluster analysis in line with rules of X-Means algorithm. </Abstract>
    <DeclaredIn>xmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>predict</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Anchor>a6fbc9ed5aef6320c526ce01e195d8562</Anchor>
    <Abstract>Calculates the closest cluster to each point. </Abstract>
    <DeclaredIn>xmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Anchor>a1e2228f8897daae84e0da34f158b549c</Anchor>
    <Abstract>Returns list of allocated clusters, each cluster contains indexes of objects in list of data...</Abstract>
    <DeclaredIn>xmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_centers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Anchor>a47df3bc038f789be565e88d1c778c776</Anchor>
    <Abstract>Returns list of centers for allocated clusters. </Abstract>
    <DeclaredIn>xmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_encoding</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Anchor>afa9eaeeb9133801596bce3e1db0cf981</Anchor>
    <Abstract>Returns clustering result representation type that indicate how clusters are encoded. </Abstract>
    <DeclaredIn>xmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_total_wce</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.cluster.xmeans.xmeans</Scope>
    </TokenIdentifier>
    <Path>dd/db4/classpyclustering_1_1cluster_1_1xmeans_1_1xmeans.html</Path>
    <Anchor>a58a892ca693ccc2fa36129b6235fbc38</Anchor>
    <Abstract>Returns sum of Euclidean Squared metric errors (SSE - Sum of Squared Errors). </Abstract>
    <DeclaredIn>xmeans.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::container</Scope>
    </TokenIdentifier>
    <Path>d3/d8e/namespacepyclustering_1_1container.html</Path>
    <Abstract>pyclustering module of data structures (containers). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::container::cftree</Scope>
    </TokenIdentifier>
    <Path>d4/d86/namespacepyclustering_1_1container_1_1cftree.html</Path>
    <Abstract>Data Structure: CF-Tree. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree::cfentry</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Abstract>Clustering feature representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>number_points</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a980cb25296ad2f062aedae01d27b7341</Anchor>
    <Abstract>Returns number of points that are encoded. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linear_sum</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a452ed314479520804a1d6d3a7c1e72f6</Anchor>
    <Abstract>Returns linear sum. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>square_sum</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a1a5e3523b53a3e3bf30495bb1a54b8a7</Anchor>
    <Abstract>Returns square sum. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a02c4dd31f1f695552e9b016842ba2824</Anchor>
    <Abstract>CF-entry constructor. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__copy__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a6ab4c09d8528f7b9167b92c3b0840bde</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a8dc92276aa24d89d387aa827a09a7626</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>ab2162c64154e741f0ca90013eda8dcf2</Anchor>
    <Abstract>Default cfentry string representation. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__add__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a100fa62e9208d2ba50b9c86af8046ad1</Anchor>
    <Abstract>Overloaded operator add. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__eq__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a15b4f2053b684cae2b58c9648685e259</Anchor>
    <Abstract>Overloaded operator eq. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a135c2025ef6022aa5ed6da0a51aa52a7</Anchor>
    <Abstract>Calculates distance between two clusters in line with measurement type. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_centroid</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>ab6e7a39eac20dc1f262732be8d6d2fa6</Anchor>
    <Abstract>Calculates centroid of cluster that is represented by the entry. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_radius</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a17bd3e143e6a67c99faba3df0068c56a</Anchor>
    <Abstract>Calculates radius of cluster that is represented by the entry. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_diameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfentry</Scope>
    </TokenIdentifier>
    <Path>d0/d77/classpyclustering_1_1container_1_1cftree_1_1cfentry.html</Path>
    <Anchor>a5c4f46d55b5b0fbb9a2bbaa9936cf0c6</Anchor>
    <Abstract>Calculates diameter of cluster that is represented by the entry. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree::cfnode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Abstract>Representation of node of CF-Tree. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a11235da4eb3052ba78d4e99bdaeff486</Anchor>
    <Abstract>Constructor of abstract CF node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>ac5a704a9795ae79036a8c9a8aab33611</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a9c341906372f98b419abbdbcb2ea6fec</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a741ed2fa386cc5d0c4ab1f8aaa097569</Anchor>
    <Abstract>Calculates distance between nodes in line with specified type measurement. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>feature</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a37bcc159b95d328ff5cb1c8120c9c495</Anchor>
    <Abstract>Clustering feature of the node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>ac524f936607d72bd0a1df640c85db5a1</Anchor>
    <Abstract>Pointer to the parent node (None for root). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>aab50115b6d0322f3f6336be39b7552de</Anchor>
    <Abstract>Type node (leaf or non-leaf). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree::cfnode_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.cftree.cfnode_type</Scope>
    </TokenIdentifier>
    <Path>d2/d23/classpyclustering_1_1container_1_1cftree_1_1cfnode__type.html</Path>
    <Abstract>Enumeration of CF-Node types that are used by CF-Tree. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CFNODE_DUMMY</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode_type</Scope>
    </TokenIdentifier>
    <Path>d2/d23/classpyclustering_1_1container_1_1cftree_1_1cfnode__type.html</Path>
    <Anchor>a38cf5f14be85848a467cf0b160fcb579</Anchor>
    <Abstract>Undefined node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CFNODE_LEAF</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode_type</Scope>
    </TokenIdentifier>
    <Path>d2/d23/classpyclustering_1_1container_1_1cftree_1_1cfnode__type.html</Path>
    <Anchor>a13361b1364ccbe614c19ce52e27c2a17</Anchor>
    <Abstract>Leaf node hasn&amp;#39;t got successors, only entries. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CFNODE_NONLEAF</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode_type</Scope>
    </TokenIdentifier>
    <Path>d2/d23/classpyclustering_1_1container_1_1cftree_1_1cfnode__type.html</Path>
    <Anchor>a06db5300686c5815142037c70d855da8</Anchor>
    <Abstract>Non-leaf node has got successors and hasn&amp;#39;t got entries. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree::cftree</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Abstract>CF-Tree representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>root</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a4d89f514a14519a88d9147fdc71faf67</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>leafes</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a1b8978e6dd27d85cf11505bffc705ec0</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>amount_nodes</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>acedfda7abf8e9ceaf310c2b8aad84f15</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>amount_entries</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a0b5384109c45e9f543eba889e1236924</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>ae06f34018e2b11849a7632a0b31e66db</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>branch_factor</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a7306e24b66f8281fd04e0326b78b90c7</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>threshold</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a21eb949efca85c9c8004b5d5e606a286</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max_entries</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a6acd2e65d138cdf0a78794d024a542cd</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type_measurement</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a923eef482f15a257938e73d60d2875bc</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a72cfe2bad5c6ef4f3ff36e7db3cb3f98</Anchor>
    <Abstract>Create CF-tree. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_level_nodes</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>af4ca6ff181fcc944ab5e99ab939f1f70</Anchor>
    <Abstract>Traverses CF-tree to obtain nodes at the specified level. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>insert_point</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>a8f34dcc8ea2e3cf754cb92e6eb875ead</Anchor>
    <Abstract>Insert point that is represented by list of coordinates. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>insert</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>aaf4b14914bce3a1bd029931188d9c526</Anchor>
    <Abstract>Insert clustering feature to the tree. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find_nearest_leaf</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cftree</Scope>
    </TokenIdentifier>
    <Path>df/d8f/classpyclustering_1_1container_1_1cftree_1_1cftree.html</Path>
    <Anchor>ada38ed7dfe537d104681fa4fe7e48057</Anchor>
    <Abstract>Search nearest leaf to the specified clustering feature. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree::leaf_node</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Abstract>Represents clustering feature leaf node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>entries</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>a8d550a4aeec10d0221ec4be875c6e096</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>ac613bb9eaa609136c14d2c012502ab71</Anchor>
    <Abstract>Create CF Leaf node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>ad5b8b7117f6db133418f94069cd22a3e</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>a230a090f6e9059b9b1bb3d21d932dcb8</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>insert_entry</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>aabdcb26637af90d8cd0ec4393b36a580</Anchor>
    <Abstract>Insert new clustering feature to the leaf node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>a739310d2ac71b53a6d185c4623019d9f</Anchor>
    <Abstract>Merge leaf node to the current. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_farthest_entries</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>a691072fcad06303743f004e1a7d12ead</Anchor>
    <Abstract>Find pair of farthest entries of the node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_nearest_index_entry</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>a508e37ebc0515160276d41e59c209c8a</Anchor>
    <Abstract>Find nearest index of nearest entry of node for the specified entry. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_nearest_entry</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>afcb3aa904fdff664c8497150a7695b48</Anchor>
    <Abstract>Find nearest entry of node for the specified entry. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a11235da4eb3052ba78d4e99bdaeff486</Anchor>
    <Abstract>Constructor of abstract CF node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>ac5a704a9795ae79036a8c9a8aab33611</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a9c341906372f98b419abbdbcb2ea6fec</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a741ed2fa386cc5d0c4ab1f8aaa097569</Anchor>
    <Abstract>Calculates distance between nodes in line with specified type measurement. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.leaf_node</Scope>
    </TokenIdentifier>
    <Path>d2/d65/classpyclustering_1_1container_1_1cftree_1_1leaf__node.html</Path>
    <Anchor>a44c4b1604771d652157d53da439002bf</Anchor>
    <Abstract>Node type in CF tree that is CFNODE_LEAF for leaf node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>feature</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a37bcc159b95d328ff5cb1c8120c9c495</Anchor>
    <Abstract>Clustering feature of the node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>ac524f936607d72bd0a1df640c85db5a1</Anchor>
    <Abstract>Pointer to the parent node (None for root). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>aab50115b6d0322f3f6336be39b7552de</Anchor>
    <Abstract>Type node (leaf or non-leaf). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree::measurement_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.cftree.measurement_type</Scope>
    </TokenIdentifier>
    <Path>d6/d8b/classpyclustering_1_1container_1_1cftree_1_1measurement__type.html</Path>
    <Abstract>Enumeration of measurement types for CF-Tree. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CENTROID_EUCLIDEAN_DISTANCE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.measurement_type</Scope>
    </TokenIdentifier>
    <Path>d6/d8b/classpyclustering_1_1container_1_1cftree_1_1measurement__type.html</Path>
    <Anchor>ac95fd71f176b4d940a6155c18da4c347</Anchor>
    <Abstract>Euclidian distance between centroids of clustering features. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CENTROID_MANHATTAN_DISTANCE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.measurement_type</Scope>
    </TokenIdentifier>
    <Path>d6/d8b/classpyclustering_1_1container_1_1cftree_1_1measurement__type.html</Path>
    <Anchor>a3795b76e520f23c4cba9293de59164ae</Anchor>
    <Abstract>Manhattan distance between centroids of clustering features. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AVERAGE_INTER_CLUSTER_DISTANCE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.measurement_type</Scope>
    </TokenIdentifier>
    <Path>d6/d8b/classpyclustering_1_1container_1_1cftree_1_1measurement__type.html</Path>
    <Anchor>aeee58246164acbd7a16550a7ad887f72</Anchor>
    <Abstract>Average distance between all objects from clustering features. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AVERAGE_INTRA_CLUSTER_DISTANCE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.measurement_type</Scope>
    </TokenIdentifier>
    <Path>d6/d8b/classpyclustering_1_1container_1_1cftree_1_1measurement__type.html</Path>
    <Anchor>a486ea03d7040970b980dc0daf2829b6e</Anchor>
    <Abstract>Average distance between all objects within clustering features and between them. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VARIANCE_INCREASE_DISTANCE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.measurement_type</Scope>
    </TokenIdentifier>
    <Path>d6/d8b/classpyclustering_1_1container_1_1cftree_1_1measurement__type.html</Path>
    <Anchor>aca0224a511a0dadba61ab0d78de4131a</Anchor>
    <Abstract>Variance based distance between clustering features. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::cftree::non_leaf_node</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Abstract>Representation of clustering feature non-leaf node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>successors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>aa5fb4ebe79571842e35f50a9b6b1934a</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>a0e985c6e393576459140477a3fff57ca</Anchor>
    <Abstract>Create CF Non-leaf node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>a369ecdad24e5d22e7e68cdd290978730</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>a2c7db13530e7351a7bb14f23e006f9b1</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>insert_successor</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>ac776d75dc40845241698fab48c60aa00</Anchor>
    <Abstract>Insert successor to the node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>ae64776c4cbc196d87e93b92f0bd98ae4</Anchor>
    <Abstract>Merge non-leaf node to the current. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_farthest_successors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>a6efe8547347a41dab8854e7720b9a632</Anchor>
    <Abstract>Find pair of farthest successors of the node in line with measurement type. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_nearest_successors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>ab5896c731b067672f61c0a9872e305a6</Anchor>
    <Abstract>Find pair of nearest successors of the node in line with measurement type. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a11235da4eb3052ba78d4e99bdaeff486</Anchor>
    <Abstract>Constructor of abstract CF node. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>ac5a704a9795ae79036a8c9a8aab33611</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a9c341906372f98b419abbdbcb2ea6fec</Anchor>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a741ed2fa386cc5d0c4ab1f8aaa097569</Anchor>
    <Abstract>Calculates distance between nodes in line with specified type measurement. </Abstract>
    <DeclaredIn>cftree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.non_leaf_node</Scope>
    </TokenIdentifier>
    <Path>d7/d25/classpyclustering_1_1container_1_1cftree_1_1non__leaf__node.html</Path>
    <Anchor>a1acbef1a3f3a3231ca7982bead932bbc</Anchor>
    <Abstract>Node type in CF tree that is CFNODE_NONLEAF for non leaf node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>feature</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>a37bcc159b95d328ff5cb1c8120c9c495</Anchor>
    <Abstract>Clustering feature of the node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>ac524f936607d72bd0a1df640c85db5a1</Anchor>
    <Abstract>Pointer to the parent node (None for root). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.cftree.cfnode</Scope>
    </TokenIdentifier>
    <Path>da/d1c/classpyclustering_1_1container_1_1cftree_1_1cfnode.html</Path>
    <Anchor>aab50115b6d0322f3f6336be39b7552de</Anchor>
    <Abstract>Type node (leaf or non-leaf). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::kdtree</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::container::kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/d68/namespacepyclustering_1_1container_1_1kdtree.html</Path>
    <Abstract>Data Structure: KD-Tree. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::kdtree::kdtree</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Abstract>Represents KD Tree that is a space-partitioning data structure for organizing points in a k-dimension...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>a1934800eb6d2d0ce82a58140cc78d686</Anchor>
    <Abstract>Create kd-tree from list of points and from according list of payloads. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>insert</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>a39933ca7171e0f84e47b3583e1d3b7d6</Anchor>
    <Abstract>Insert new point with payload to kd-tree. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>a0a968f10336fe7749873cc2c6b671b52</Anchor>
    <Abstract>Remove specified point from kd-tree. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find_minimal_node</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>ae23b53e282635cafe0bc84e0e151be17</Anchor>
    <Abstract>Find minimal node in line with coordinate that is defined by discriminator. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find_node_with_payload</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>adc5ddbf4a69f4b46168582a3356a87b0</Anchor>
    <Abstract>Find node with specified coordinates and payload. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find_node</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>a0449b4c1522144eeb7cffddf4657e5ee</Anchor>
    <Abstract>Find node with coordinates that are defined by specified point. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find_nearest_dist_node</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>afd103477bd8443daf5bfbd5efc782ba0</Anchor>
    <Abstract>Find nearest neighbor in area with radius = distance. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find_nearest_dist_nodes</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>a55e81acadc121a0e84e6279d1d53e019</Anchor>
    <Abstract>Find neighbors that are located in area that is covered by specified distance. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>children</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>a57738f60936ec19db83392bca3cb564a</Anchor>
    <Abstract>Returns list of children of node. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>traverse</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree</Scope>
    </TokenIdentifier>
    <Path>d8/dc8/classpyclustering_1_1container_1_1kdtree_1_1kdtree.html</Path>
    <Anchor>a4856e74bcc475c1dd0024e53a44a7ac2</Anchor>
    <Abstract>Traverses all nodes of subtree that is defined by node specified in input parameter. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::kdtree::kdtree_text_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.kdtree.kdtree_text_visualizer</Scope>
    </TokenIdentifier>
    <Path>d1/d48/classpyclustering_1_1container_1_1kdtree_1_1kdtree__text__visualizer.html</Path>
    <Abstract>KD-tree text visualizer that provides service to diplay tree structure using text representation...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree_text_visualizer</Scope>
    </TokenIdentifier>
    <Path>d1/d48/classpyclustering_1_1container_1_1kdtree_1_1kdtree__text__visualizer.html</Path>
    <Anchor>aa707dedbad277e572ff405a733135980</Anchor>
    <Abstract>Initialize KD-tree text visualizer. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visualize</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.kdtree_text_visualizer</Scope>
    </TokenIdentifier>
    <Path>d1/d48/classpyclustering_1_1container_1_1kdtree_1_1kdtree__text__visualizer.html</Path>
    <Anchor>ae815a05a43e6af15a792c71009bd82c0</Anchor>
    <Abstract>Display KD-tree to console. </Abstract>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::container::kdtree::node</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Abstract>Represents node of KD-Tree. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>abf6637e56f01dc1da8f9edf20e7cadcf</Anchor>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>acfe5367103c955069eca96f9f2cb409e</Anchor>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>a6fea78e9d7d88f9d3de9a5bd38851eeb</Anchor>
    <DeclaredIn>kdtree.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>a91de8d82c52d260cf71dee521cb51465</Anchor>
    <Abstract>Data point that is presented as list of coodinates. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>payload</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>ab2066e2d6f94176d55f9e2ecd11ef70b</Anchor>
    <Abstract>Payload of node that can be used by user for storing specific information in the node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>a116ba6a7f4c19bf8c03308fa5c440401</Anchor>
    <Abstract>Left node successor of the node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>right</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>a21dc6df667ae8ddb39067e68b493a8a1</Anchor>
    <Abstract>Right node successor of the node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disc</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>a83baf981fbcc8f74ed4cc94c1e699b07</Anchor>
    <Abstract>Index of dimension. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.container.kdtree.node</Scope>
    </TokenIdentifier>
    <Path>dd/d06/classpyclustering_1_1container_1_1kdtree_1_1node.html</Path>
    <Anchor>a605ef7c3c3e99620ae62730be9c3e07f</Anchor>
    <Abstract>Parent node of the node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::gcolor</Scope>
    </TokenIdentifier>
    <Path>d6/d20/namespacepyclustering_1_1gcolor.html</Path>
    <Abstract>pyclustering module for graph coloring algorithms. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::dsatur</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::gcolor::dsatur</Scope>
    </TokenIdentifier>
    <Path>d9/d5d/namespacepyclustering_1_1gcolor_1_1dsatur.html</Path>
    <Abstract>Graph coloring algorithm: DSATUR. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::dsatur::dsatur</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.gcolor.dsatur.dsatur</Scope>
    </TokenIdentifier>
    <Path>d2/d11/classpyclustering_1_1gcolor_1_1dsatur_1_1dsatur.html</Path>
    <Abstract>Represents DSATUR algorithm for graph coloring problem that uses greedy strategy. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.dsatur.dsatur</Scope>
    </TokenIdentifier>
    <Path>d2/d11/classpyclustering_1_1gcolor_1_1dsatur_1_1dsatur.html</Path>
    <Anchor>ac301e4132f6dcfd61d6d61c209313ea2</Anchor>
    <Abstract>Constructor of DSATUR algorithm. </Abstract>
    <DeclaredIn>dsatur.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.dsatur.dsatur</Scope>
    </TokenIdentifier>
    <Path>d2/d11/classpyclustering_1_1gcolor_1_1dsatur_1_1dsatur.html</Path>
    <Anchor>ae85bafc0e97c2699ebb213005256f992</Anchor>
    <Abstract>Perform graph coloring using DSATUR algorithm. </Abstract>
    <DeclaredIn>dsatur.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_colors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.dsatur.dsatur</Scope>
    </TokenIdentifier>
    <Path>d2/d11/classpyclustering_1_1gcolor_1_1dsatur_1_1dsatur.html</Path>
    <Anchor>a1b399b214d7bef9fc382c4f5007668de</Anchor>
    <Abstract>Returns results of graph coloring. </Abstract>
    <DeclaredIn>dsatur.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::hysteresis</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::gcolor::hysteresis</Scope>
    </TokenIdentifier>
    <Path>d2/d2b/namespacepyclustering_1_1gcolor_1_1hysteresis.html</Path>
    <Abstract>Graph coloring algorithm: Algorithm based on Hysteresis Oscillatory Network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::hysteresis::hysteresis_analyser</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.gcolor.hysteresis.hysteresis_analyser</Scope>
    </TokenIdentifier>
    <Path>df/de3/classpyclustering_1_1gcolor_1_1hysteresis_1_1hysteresis__analyser.html</Path>
    <Abstract>Performs analysis of output dynamic of the hysteresis oscillatory network to extract information abou...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.hysteresis.hysteresis_analyser</Scope>
    </TokenIdentifier>
    <Path>df/de3/classpyclustering_1_1gcolor_1_1hysteresis_1_1hysteresis__analyser.html</Path>
    <Anchor>a1c83a9b55ec78f708f9e6fa8726b2abc</Anchor>
    <Abstract>Constructor of the analyser. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.hysteresis.hysteresis_analyser</Scope>
    </TokenIdentifier>
    <Path>df/de3/classpyclustering_1_1gcolor_1_1hysteresis_1_1hysteresis__analyser.html</Path>
    <Anchor>a6279830f4fab02e11953e281d66e7dcd</Anchor>
    <Abstract>Returns list of clusters in line with state of ocillators (phases). </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_map_coloring</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.hysteresis.hysteresis_analyser</Scope>
    </TokenIdentifier>
    <Path>df/de3/classpyclustering_1_1gcolor_1_1hysteresis_1_1hysteresis__analyser.html</Path>
    <Anchor>a81cabaa67eb846770d2bc00d515f790e</Anchor>
    <Abstract>Returns list of color indexes that are assigned to each object from input data space accordingly...</Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>a0adcc54ff54620662182c2e989c9640e</Anchor>
    <Abstract>(list) Returns outputs of oscillator during simulation. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>ad00a2aa0531e98dfea5fb89dc73a0a8c</Anchor>
    <Abstract>(list) Returns sampling times when dynamic is measured during simulation. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>a8d7ce865e5d119314ed2df87744d9ef6</Anchor>
    <Abstract>Constructor of hysteresis neural network dynamic. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>af8a3052f0886661bbd486be34736bfe7</Anchor>
    <Abstract>(uint) Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>a9294da08287f9bc0dcb1d767541c0360</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::hysteresis::hysteresisgcolor</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.gcolor.hysteresis.hysteresisgcolor</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1gcolor_1_1hysteresis_1_1hysteresisgcolor.html</Path>
    <Abstract>Class represents graph coloring algorithm based on hysteresis oscillatory network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.hysteresis.hysteresisgcolor</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1gcolor_1_1hysteresis_1_1hysteresisgcolor.html</Path>
    <Anchor>a7e40f9e1fe1b8faf3fabfcacf78df343</Anchor>
    <Abstract>Constructor of hysteresis oscillatory network for graph coloring. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.hysteresis.hysteresisgcolor</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1gcolor_1_1hysteresis_1_1hysteresisgcolor.html</Path>
    <Anchor>a350f14a9fa3c6da6ad5fa0be3c2f3b67</Anchor>
    <Abstract>Peforms graph coloring analysis using simulation of the oscillatory network. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a0530c54a541e51868b2b67671b3bfc96</Anchor>
    <Abstract>Returns current outputs of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a24eae656c072dfceab1c075e69807991</Anchor>
    <Abstract>Sets outputs of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>states</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a5ccfe533dc92d0b950b7062d2c310f53</Anchor>
    <Abstract>Return current states of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>states</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a5400ac4b7441e0e1f029226a969e4b8a</Anchor>
    <Abstract>Set current states of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a7b400bd37e5c1eec4b51be7a668006f5</Anchor>
    <Abstract>Constructor of hysteresis oscillatory network. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a0a09ab4f3984abf814a8bf1be8069baa</Anchor>
    <Abstract>Performs static simulation of hysteresis oscillatory network. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a461ea7ef6d5cb22e009017ecc209859e</Anchor>
    <Abstract>Performs static simulation of hysteresis oscillatory network. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::sync</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::gcolor::sync</Scope>
    </TokenIdentifier>
    <Path>d8/d65/namespacepyclustering_1_1gcolor_1_1sync.html</Path>
    <Abstract>Graph coloring algorithm based on Sync Oscillatory Network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::sync::syncgcolor</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.gcolor.sync.syncgcolor</Scope>
    </TokenIdentifier>
    <Path>d5/d98/classpyclustering_1_1gcolor_1_1sync_1_1syncgcolor.html</Path>
    <Abstract>Oscillatory network based on Kuramoto model with negative and positive connections for graph coloring...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.sync.syncgcolor</Scope>
    </TokenIdentifier>
    <Path>d5/d98/classpyclustering_1_1gcolor_1_1sync_1_1syncgcolor.html</Path>
    <Anchor>aa536cae94537e3c267d568f99f0144b2</Anchor>
    <Abstract>Constructor of the oscillatory network syncgcolor for graph coloring problem. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.sync.syncgcolor</Scope>
    </TokenIdentifier>
    <Path>d5/d98/classpyclustering_1_1gcolor_1_1sync_1_1syncgcolor.html</Path>
    <Anchor>a09586e5d20921ab859ff9146699c2a69</Anchor>
    <Abstract>Performs simulation of the network (performs solving of graph coloring problem). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a6c559dfa166ad2ff2ae4bfceb8ee7ffc</Anchor>
    <Abstract>Constructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a9252c8e7c094aea2ffd6494df8c63ee8</Anchor>
    <Abstract>Destructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ae1cae6c1af46d4617b7c3561b38a2d24</Anchor>
    <Abstract>Calculates current level of global synchorization (order parameter) in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_local_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>adbc01ffd91284cad3a2f06da0b399805</Anchor>
    <Abstract>Calculates current level of local (partial) synchronization in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a3acee8446ba88cfbc400ed0d326d0191</Anchor>
    <Abstract>Performs static simulation of Sync oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ab4d1e9c5af1a761b0ee9f3d7814c9e4e</Anchor>
    <Abstract>Performs dynamic simulation of the network until stop condition is not reached. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ad1d77b799a8113316532254008bc60c4</Anchor>
    <Abstract>Performs static simulation of oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a48bfa8764203f8e0ae1bf5353134df2d</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a2c38c23193f77cfde9f989197297151e</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::gcolor::sync::syncgcolor_analyser</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.gcolor.sync.syncgcolor_analyser</Scope>
    </TokenIdentifier>
    <Path>d5/d9e/classpyclustering_1_1gcolor_1_1sync_1_1syncgcolor__analyser.html</Path>
    <Abstract>Analyser of output dynamic of the oscillatory network syncgcolor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.sync.syncgcolor_analyser</Scope>
    </TokenIdentifier>
    <Path>d5/d9e/classpyclustering_1_1gcolor_1_1sync_1_1syncgcolor__analyser.html</Path>
    <Anchor>abb41bcc98e21fba5bc6d0e375b2d15d8</Anchor>
    <Abstract>Constructor of the analyser. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_color_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.sync.syncgcolor_analyser</Scope>
    </TokenIdentifier>
    <Path>d5/d9e/classpyclustering_1_1gcolor_1_1sync_1_1syncgcolor__analyser.html</Path>
    <Anchor>ab3fa421a7d14d7f59aeb6175a89f6b4b</Anchor>
    <Abstract>Allocates clusters, when one cluster defines only one color. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_map_coloring</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.gcolor.sync.syncgcolor_analyser</Scope>
    </TokenIdentifier>
    <Path>d5/d9e/classpyclustering_1_1gcolor_1_1sync_1_1syncgcolor__analyser.html</Path>
    <Anchor>a9d4084259f1c25284b864d25b6952f77</Anchor>
    <Abstract>Allocates coloring map for graph that has been processed. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a218702c7c078387e54bb8ea94a81a818</Anchor>
    <Abstract>(list) Returns output dynamic of the Sync network (phase coordinates of each oscillator in the networ...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a91fdb6b0efab62a7c8a046ea45b49d44</Anchor>
    <Abstract>(list) Returns sampling times when dynamic is measured during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a99376c9fe25182c5fba1ca3e5116349d</Anchor>
    <Abstract>Constructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a2c08fb4d750f456fef48afeddc0daeb0</Anchor>
    <Abstract>Default destructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aacc3380b1a85eab88c13fe237c1e0dfa</Anchor>
    <Abstract>Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__getitem__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a14746ba3c7b2eaad75f84754c1088f77</Anchor>
    <Abstract>Indexing of the dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a4f3c8155c31a1e6df48d3455e3f9cc54</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>ac1095b7b3e5597eff50b23b02c5a6c8b</Anchor>
    <Abstract>Returns 2D matrix of phase values of oscillators at the specified iteration of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a225da35991a7ab5fa5922d0194e8b729</Anchor>
    <Abstract>Allocate correlation matrix between oscillators at the specified step of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aa7785daff161a5f5e359699699880f84</Anchor>
    <Abstract>Calculates level of global synchorization (order parameter). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_local_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>af4ba96d7adf1c0786340d295489374a0</Anchor>
    <Abstract>Calculates local order parameter. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet</Scope>
    </TokenIdentifier>
    <Path>d4/dbd/namespacepyclustering_1_1nnet.html</Path>
    <Abstract>Neural and oscillatory network module. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::conn_represent</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.conn_represent</Scope>
    </TokenIdentifier>
    <Path>d9/d7b/classpyclustering_1_1nnet_1_1conn__represent.html</Path>
    <Abstract>Enumerator of internal network connection representation between oscillators. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LIST</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_represent</Scope>
    </TokenIdentifier>
    <Path>d9/d7b/classpyclustering_1_1nnet_1_1conn__represent.html</Path>
    <Anchor>a6c0ce3088a58c7c73bd0d69723743104</Anchor>
    <Abstract>Each oscillator has list of his neighbors. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MATRIX</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_represent</Scope>
    </TokenIdentifier>
    <Path>d9/d7b/classpyclustering_1_1nnet_1_1conn__represent.html</Path>
    <Anchor>ae36a1d0c6cec2d8b7f9417f50d8e65d5</Anchor>
    <Abstract>Connections are represented my matrix connection NxN, where N is number of oscillators. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::conn_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.conn_type</Scope>
    </TokenIdentifier>
    <Path>d7/d90/classpyclustering_1_1nnet_1_1conn__type.html</Path>
    <Abstract>Enumerator of connection types between oscillators. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NONE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_type</Scope>
    </TokenIdentifier>
    <Path>d7/d90/classpyclustering_1_1nnet_1_1conn__type.html</Path>
    <Anchor>a677132ffa4d340d5f8ffb5e88e25b28e</Anchor>
    <Abstract>No connection between oscillators. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ALL_TO_ALL</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_type</Scope>
    </TokenIdentifier>
    <Path>d7/d90/classpyclustering_1_1nnet_1_1conn__type.html</Path>
    <Anchor>ad7d28cdef7be88899a45a07110318262</Anchor>
    <Abstract>All oscillators have connection with each other. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GRID_FOUR</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_type</Scope>
    </TokenIdentifier>
    <Path>d7/d90/classpyclustering_1_1nnet_1_1conn__type.html</Path>
    <Anchor>aedbd8ecbee78846df99e1c58da44669e</Anchor>
    <Abstract>Connections between oscillators represent grid where one oscillator can be connected with four neighb...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GRID_EIGHT</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_type</Scope>
    </TokenIdentifier>
    <Path>d7/d90/classpyclustering_1_1nnet_1_1conn__type.html</Path>
    <Anchor>ad69e1c27b3538b46ba01794f21b53ec9</Anchor>
    <Abstract>Connections between oscillators represent grid where one oscillator can be connected with eight neigh...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LIST_BIDIR</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_type</Scope>
    </TokenIdentifier>
    <Path>d7/d90/classpyclustering_1_1nnet_1_1conn__type.html</Path>
    <Anchor>a19d66d8d29d0cdb69586ee507de838ff</Anchor>
    <Abstract>Connections between oscillators represent bidirectional list. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DYNAMIC</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.conn_type</Scope>
    </TokenIdentifier>
    <Path>d7/d90/classpyclustering_1_1nnet_1_1conn__type.html</Path>
    <Anchor>a71c3f006e0c169d179023b4f58a9700c</Anchor>
    <Abstract>Connections are defined by user or by network during simulation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::initial_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.initial_type</Scope>
    </TokenIdentifier>
    <Path>d2/d10/classpyclustering_1_1nnet_1_1initial__type.html</Path>
    <Abstract>Enumerator of types of oscillator output initialization. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RANDOM_GAUSSIAN</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.initial_type</Scope>
    </TokenIdentifier>
    <Path>d2/d10/classpyclustering_1_1nnet_1_1initial__type.html</Path>
    <Anchor>a19ef6787048afe79e18b723d56e3b68f</Anchor>
    <Abstract>Output of oscillators are random in line with gaussian distribution. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EQUIPARTITION</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.initial_type</Scope>
    </TokenIdentifier>
    <Path>d2/d10/classpyclustering_1_1nnet_1_1initial__type.html</Path>
    <Anchor>ac3dd5a51b78be5c930b21dcac793de70</Anchor>
    <Abstract>Output of oscillators are equidistant from each other (uniformly distributed, not randomly)...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Abstract>Common network description that consists of information about oscillators and connection between them...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::solve_type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.solve_type</Scope>
    </TokenIdentifier>
    <Path>d5/d6b/classpyclustering_1_1nnet_1_1solve__type.html</Path>
    <Abstract>Enumerator of solver types that are used for network simulation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FAST</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.solve_type</Scope>
    </TokenIdentifier>
    <Path>d5/d6b/classpyclustering_1_1nnet_1_1solve__type.html</Path>
    <Anchor>a5538887b827ad62c90689bc0e8759a4b</Anchor>
    <Abstract>Forward Euler first-order method. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RK4</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.solve_type</Scope>
    </TokenIdentifier>
    <Path>d5/d6b/classpyclustering_1_1nnet_1_1solve__type.html</Path>
    <Anchor>ae168b8be4382532058f6b810c7a15536</Anchor>
    <Abstract>Classic fourth-order Runge-Kutta method (fixed step). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RKF45</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.solve_type</Scope>
    </TokenIdentifier>
    <Path>d5/d6b/classpyclustering_1_1nnet_1_1solve__type.html</Path>
    <Anchor>abdcd3177b777e2a1cd7cb5c0145c574a</Anchor>
    <Abstract>Runge-Kutta-Fehlberg method with order 4 and 5 (float step). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::cnn</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::cnn</Scope>
    </TokenIdentifier>
    <Path>df/d29/namespacepyclustering_1_1nnet_1_1cnn.html</Path>
    <Abstract>Chaotic Neural Network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::cnn::cnn_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.cnn.cnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>dd/d8a/classpyclustering_1_1nnet_1_1cnn_1_1cnn__dynamic.html</Path>
    <Abstract>Container of output dynamic of the chaotic neural network where states of each neuron during simulati...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>dd/d8a/classpyclustering_1_1nnet_1_1cnn_1_1cnn__dynamic.html</Path>
    <Anchor>aa51f9de8bc5d4eefb0d4088c78614c19</Anchor>
    <Abstract>Costructor of the chaotic neural network output dynamic. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>dd/d8a/classpyclustering_1_1nnet_1_1cnn_1_1cnn__dynamic.html</Path>
    <Anchor>ab189fc51ec8844f1e5fb7479dc072d31</Anchor>
    <Abstract>(uint) Returns amount of simulation steps that are stored. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_observation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>dd/d8a/classpyclustering_1_1nnet_1_1cnn_1_1cnn__dynamic.html</Path>
    <Anchor>a679b82f5554de449dd38e51b4838ad15</Anchor>
    <Abstract>Allocates observation matrix in line with output dynamic of the network. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>dd/d8a/classpyclustering_1_1nnet_1_1cnn_1_1cnn__dynamic.html</Path>
    <Anchor>aab2d509d3f3edcc0eb6e5ff64042e1da</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous neurons where each synchronous ensemble corre...</Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.cnn.cnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>dd/d8a/classpyclustering_1_1nnet_1_1cnn_1_1cnn__dynamic.html</Path>
    <Anchor>a5648173754053d257db44752161af435</Anchor>
    <Abstract>Output value of each neuron on each iteration. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.cnn.cnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>dd/d8a/classpyclustering_1_1nnet_1_1cnn_1_1cnn__dynamic.html</Path>
    <Anchor>a0ef99d7f92fce7ca9b3339dd65765e3d</Anchor>
    <Abstract>Sequence of simulation steps of the network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::cnn::cnn_network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.cnn.cnn_network</Scope>
    </TokenIdentifier>
    <Path>d6/da3/classpyclustering_1_1nnet_1_1cnn_1_1cnn__network.html</Path>
    <Abstract>Chaotic neural network based on system of logistic map where clustering phenomenon can be observed...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_network</Scope>
    </TokenIdentifier>
    <Path>d6/da3/classpyclustering_1_1nnet_1_1cnn_1_1cnn__network.html</Path>
    <Anchor>aec263ec200328e6388ed634b6096c32d</Anchor>
    <Abstract>Constructor of chaotic neural network. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_network</Scope>
    </TokenIdentifier>
    <Path>d6/da3/classpyclustering_1_1nnet_1_1cnn_1_1cnn__network.html</Path>
    <Anchor>a742c643fdc5cc6e696681d01a52efbbb</Anchor>
    <Abstract>Returns size of the chaotic neural network that is defined by amount of neurons. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_network</Scope>
    </TokenIdentifier>
    <Path>d6/da3/classpyclustering_1_1nnet_1_1cnn_1_1cnn__network.html</Path>
    <Anchor>a1e85399b11278105ed59632c2fdf82a0</Anchor>
    <Abstract>Simulates chaotic neural network with extrnal stimulus during specified steps. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_network</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_network</Scope>
    </TokenIdentifier>
    <Path>d6/da3/classpyclustering_1_1nnet_1_1cnn_1_1cnn__network.html</Path>
    <Anchor>a09f1d3e25382a8bee766f6d0870df176</Anchor>
    <Abstract>Shows structure of the network: neurons and connections between them. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::cnn::cnn_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.cnn.cnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>d9/d94/classpyclustering_1_1nnet_1_1cnn_1_1cnn__visualizer.html</Path>
    <Abstract>Visualizer of output dynamic of chaotic neural network (CNN). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>d9/d94/classpyclustering_1_1nnet_1_1cnn_1_1cnn__visualizer.html</Path>
    <Anchor>a58790d2fa0c9b6cc0505a36144fa946b</Anchor>
    <Abstract>Shows output dynamic (output of each neuron) during simulation. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_dynamic_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>d9/d94/classpyclustering_1_1nnet_1_1cnn_1_1cnn__visualizer.html</Path>
    <Anchor>aab631e872833bbc70ee14f6d392a2d47</Anchor>
    <Abstract>Shows output dynamic as matrix in grey colors. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_observation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.cnn.cnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>d9/d94/classpyclustering_1_1nnet_1_1cnn_1_1cnn__visualizer.html</Path>
    <Anchor>a6f74be733476f2bf9d18d07dee141a2f</Anchor>
    <Abstract>Shows observation matrix as black/white blocks. </Abstract>
    <DeclaredIn>cnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::cnn::type_conn</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.cnn.type_conn</Scope>
    </TokenIdentifier>
    <Path>d8/d71/classpyclustering_1_1nnet_1_1cnn_1_1type__conn.html</Path>
    <Abstract>Enumeration of connection types for Chaotic Neural Network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ALL_TO_ALL</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.cnn.type_conn</Scope>
    </TokenIdentifier>
    <Path>d8/d71/classpyclustering_1_1nnet_1_1cnn_1_1type__conn.html</Path>
    <Anchor>a1725c8c1a4cc92ba7c21d31888bf3958</Anchor>
    <Abstract>All oscillators have connection with each other. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TRIANGULATION_DELAUNAY</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.cnn.type_conn</Scope>
    </TokenIdentifier>
    <Path>d8/d71/classpyclustering_1_1nnet_1_1cnn_1_1type__conn.html</Path>
    <Anchor>ab51e6214f0e8194b0109540f826038a4</Anchor>
    <Abstract>Connections between oscillators are created in line with Delaunay triangulation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::dynamic_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::dynamic_visualizer</Scope>
    </TokenIdentifier>
    <Path>d1/dce/namespacepyclustering_1_1nnet_1_1dynamic__visualizer.html</Path>
    <Abstract>Output dynamic visualizer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::dynamic_visualizer::canvas_descr</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Abstract>Describes plot where dynamic is displayed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Anchor>a453add1674cb4fb770b86a96e5275014</Anchor>
    <Abstract>Constructor of canvas. </Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>x_title</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Anchor>a555f6cd652eb23bdae7f0307b3803f73</Anchor>
    <Abstract>Title for X axis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>y_title</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Anchor>a4924327113befa461cf81e272bcff2a5</Anchor>
    <Abstract>Title for Y axis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>x_lim</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Anchor>a805b4229f25c0b665d4785fd6d492f3c</Anchor>
    <Abstract>Borders of X axis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>y_lim</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Anchor>a86a0a5d572480ee19fefdc274de21d58</Anchor>
    <Abstract>Borders of Y axis. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>x_labels</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Anchor>a35e4109958dcfa603d6de1dba8716137</Anchor>
    <Abstract>Defines whether X label should be displayed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>y_labels</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.canvas_descr</Scope>
    </TokenIdentifier>
    <Path>d6/dbb/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1canvas__descr.html</Path>
    <Anchor>a56275de4de7ad4c8cde64ff1a41986de</Anchor>
    <Abstract>Defines whether Y label should be displayed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::dynamic_visualizer::dynamic_descr</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Abstract>Output dynamic description that used to display. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Anchor>ac29711a3b1fae5b7a5c7451d3675d515</Anchor>
    <Abstract>Constructor of output dynamic descriptor. </Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_axis_index</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Anchor>a6b90696e02d93d646e5aaecaeda73380</Anchor>
    <Abstract>Returns index of canvas where specified dynamic (by index &amp;#39;index_dynamic&amp;#39;) should be displayed...</Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canvas</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Anchor>afa38174059da864a4a1be5f3caa33dd3</Anchor>
    <Abstract>Index of canvas where (or from which) dynamic should be displayed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Anchor>a8d678f03840e368df9ecc1c2be2c254f</Anchor>
    <Abstract>Time points. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dynamics</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Anchor>a08717cf9160cd419c714c7d9cbae8f76</Anchor>
    <Abstract>Dynamic or dynamics. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>separate</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Anchor>a4c2375beaf65ca11c24792ab84d89fe1</Anchor>
    <Abstract>Defines how dynamic(s) should be displayed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>color</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_descr</Scope>
    </TokenIdentifier>
    <Path>de/de0/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__descr.html</Path>
    <Anchor>a74abf9f6c72740e3e0b0e8c6035eae1f</Anchor>
    <Abstract>Color of dynamic. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::dynamic_visualizer::dynamic_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_visualizer</Scope>
    </TokenIdentifier>
    <Path>d7/df7/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__visualizer.html</Path>
    <Abstract>Basic output dynamic visualizer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_visualizer</Scope>
    </TokenIdentifier>
    <Path>d7/df7/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__visualizer.html</Path>
    <Anchor>a79ca04a3d7a33853ca3284a7a1056822</Anchor>
    <Abstract>Construct dynamic visualizer. </Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_canvas_properties</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_visualizer</Scope>
    </TokenIdentifier>
    <Path>d7/df7/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__visualizer.html</Path>
    <Anchor>a897002e023e973ed588b930cd1ea915a</Anchor>
    <Abstract>Set properties for specified canvas. </Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_visualizer</Scope>
    </TokenIdentifier>
    <Path>d7/df7/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__visualizer.html</Path>
    <Anchor>a8daeda9fff690609f5e106b710d4f892</Anchor>
    <Abstract>Append single dynamic to specified canvas (by default to the first with index &amp;#39;0&amp;#39;). </Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append_dynamics</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_visualizer</Scope>
    </TokenIdentifier>
    <Path>d7/df7/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__visualizer.html</Path>
    <Anchor>a9b3bc463ef30828ae19729341ffd901c</Anchor>
    <Abstract>Append several dynamics to canvas or canvases (defined by &amp;#39;canvas&amp;#39; and &amp;#39;separate&amp;#39; arguments)...</Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.dynamic_visualizer.dynamic_visualizer</Scope>
    </TokenIdentifier>
    <Path>d7/df7/classpyclustering_1_1nnet_1_1dynamic__visualizer_1_1dynamic__visualizer.html</Path>
    <Anchor>a06839f2d9503339619e4b9aba1a03f24</Anchor>
    <Abstract>Draw and show output dynamics. </Abstract>
    <DeclaredIn>dynamic_visualizer.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::fsync</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::fsync</Scope>
    </TokenIdentifier>
    <Path>da/d3c/namespacepyclustering_1_1nnet_1_1fsync.html</Path>
    <Abstract>Oscillatory Neural Network based on Kuramoto model in frequency domain. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::fsync::fsync_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Abstract>Represents output dynamic of Sync in frequency domain. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Anchor>ad0ca1ee881c974ed2475b8d26180149b</Anchor>
    <Abstract>Constructor of Sync dynamic in frequency domain. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Anchor>ab7ad43d442c9b095c0b3405232bfa1b0</Anchor>
    <Abstract>(list) Returns output dynamic of the Sync network (amplitudes of each oscillator in the network) duri...</Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Anchor>a25498fc38372ca5b490eeb9dc2cd6896</Anchor>
    <Abstract>(list) Returns time-points corresponds to dynamic-points points. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Anchor>ac8f37f06a629afc691a0f3d96a16b068</Anchor>
    <Abstract>(uint) Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__getitem__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Anchor>ad9a1a22bf9dece79abb5bcc58ce67348</Anchor>
    <Abstract>Indexing of the dynamic. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Anchor>ac328343bb471a75cbe42ca3d94fd112b</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extract_number_oscillations</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__dynamic.html</Path>
    <Anchor>ae8efd1c32ee1956fd0bbc2f52ada3c59</Anchor>
    <Abstract>Extracts number of oscillations of specified oscillator. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::fsync::fsync_network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.fsync.fsync_network</Scope>
    </TokenIdentifier>
    <Path>dc/d73/classpyclustering_1_1nnet_1_1fsync_1_1fsync__network.html</Path>
    <Abstract>Model of oscillatory network that uses Landau-Stuart oscillator and Kuramoto model as a synchronizati...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_network</Scope>
    </TokenIdentifier>
    <Path>dc/d73/classpyclustering_1_1nnet_1_1fsync_1_1fsync__network.html</Path>
    <Anchor>add290271a724413fd274d6cd5eabc5e3</Anchor>
    <Abstract>Constructor of oscillatory network based on synchronization Kuramoto model and Landau-Stuart oscillat...</Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_network</Scope>
    </TokenIdentifier>
    <Path>dc/d73/classpyclustering_1_1nnet_1_1fsync_1_1fsync__network.html</Path>
    <Anchor>a87e399eb1ff8d1b5090be6146086ce59</Anchor>
    <Abstract>Performs static simulation of oscillatory network. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::fsync::fsync_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.fsync.fsync_visualizer</Scope>
    </TokenIdentifier>
    <Path>d4/df4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__visualizer.html</Path>
    <Abstract>Visualizer of output dynamic of sync network in frequency domain. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_visualizer</Scope>
    </TokenIdentifier>
    <Path>d4/df4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__visualizer.html</Path>
    <Anchor>ac5645daafbce2f3e3f9c8e8b9492cae0</Anchor>
    <Abstract>Shows output dynamic (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamics</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.fsync.fsync_visualizer</Scope>
    </TokenIdentifier>
    <Path>d4/df4/classpyclustering_1_1nnet_1_1fsync_1_1fsync__visualizer.html</Path>
    <Anchor>a60a31f612f74aa8d10abfec592bad0d0</Anchor>
    <Abstract>Shows several output dynamics (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>fsync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hhn</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::hhn</Scope>
    </TokenIdentifier>
    <Path>d7/d56/namespacepyclustering_1_1nnet_1_1hhn.html</Path>
    <Abstract>Oscillatory Neural Network based on Hodgkin-Huxley Neuron Model. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hhn::central_element</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Abstract>Central element consist of two central neurons that are described by a little bit different dynamic t...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>a82661307358610f238309cc33aa9f91d</Anchor>
    <Abstract>Constructor of central element. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>ae655f5927686a02cfb2c352fadc4f688</Anchor>
    <Abstract>Returns string that represents central element. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>membrane_potential</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>a86e8e8361395bca2dd1aaa7879f9714c</Anchor>
    <Abstract>Membrane potential of cenral neuron (V). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>active_cond_sodium</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>a99cfc74e1edb3dd742408e69713e3963</Anchor>
    <Abstract>Activation conductance of the sodium channel (m). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inactive_cond_sodium</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>a49b32d998f8f28810ec23aad8d218291</Anchor>
    <Abstract>Inactivaton conductance of the sodium channel (h). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>active_cond_potassium</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>a4a5fc8742419e36580a35aa78e6b4597</Anchor>
    <Abstract>Activaton conductance of the sodium channel (h). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pulse_generation</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>a58933ce47a2d824990bc3ad3ac322193</Anchor>
    <Abstract>Spike generation of central neuron. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pulse_generation_time</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.central_element</Scope>
    </TokenIdentifier>
    <Path>d7/db8/classpyclustering_1_1nnet_1_1hhn_1_1central__element.html</Path>
    <Anchor>a6512f530390a299af3e84ea39727406d</Anchor>
    <Abstract>Timestamps of generated pulses. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hhn::hhn_network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.hhn.hhn_network</Scope>
    </TokenIdentifier>
    <Path>de/dec/classpyclustering_1_1nnet_1_1hhn_1_1hhn__network.html</Path>
    <Abstract>Oscillatory Neural Network with central element based on Hodgkin-Huxley neuron model. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.hhn_network</Scope>
    </TokenIdentifier>
    <Path>de/dec/classpyclustering_1_1nnet_1_1hhn_1_1hhn__network.html</Path>
    <Anchor>aa58688a82a1f636b9c77083a72452992</Anchor>
    <Abstract>Constructor of oscillatory network based on Hodgkin-Huxley neuron model. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.hhn_network</Scope>
    </TokenIdentifier>
    <Path>de/dec/classpyclustering_1_1nnet_1_1hhn_1_1hhn__network.html</Path>
    <Anchor>ad873d17d944a3bb9cdae0cd45f298f83</Anchor>
    <Abstract>Destroy dynamically allocated oscillatory network instance in case of CCORE usage. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.hhn_network</Scope>
    </TokenIdentifier>
    <Path>de/dec/classpyclustering_1_1nnet_1_1hhn_1_1hhn__network.html</Path>
    <Anchor>a0539e63e4d81ca5a0d356a1e13385fd7</Anchor>
    <Abstract>Performs static simulation of oscillatory network based on Hodgkin-Huxley neuron model. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.hhn_network</Scope>
    </TokenIdentifier>
    <Path>de/dec/classpyclustering_1_1nnet_1_1hhn_1_1hhn__network.html</Path>
    <Anchor>aeba4d5d393d463cf953f11bd08a37881</Anchor>
    <Abstract>Performs static simulation of oscillatory network based on Hodgkin-Huxley neuron model. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hnn_state</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.hhn_network</Scope>
    </TokenIdentifier>
    <Path>de/dec/classpyclustering_1_1nnet_1_1hhn_1_1hhn__network.html</Path>
    <Anchor>ad4e2a092e5b95a9137c626e71b7b6618</Anchor>
    <Abstract>Returns new values of excitatory and inhibitory parts of oscillator and potential of oscillator...</Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.hhn_network</Scope>
    </TokenIdentifier>
    <Path>de/dec/classpyclustering_1_1nnet_1_1hhn_1_1hhn__network.html</Path>
    <Anchor>aed0bff455ce6761b9a3e16932bfe3cbb</Anchor>
    <Abstract>Allocates clusters in line with ensembles of synchronous oscillators where each. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hhn::hhn_parameters</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Abstract>Describes parameters of Hodgkin-Huxley Oscillatory Network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a0ca834c1256031f96007e1b9555b04b7</Anchor>
    <Abstract>Default constructor of parameters for Hodgkin-Huxley Oscillatory Network. </Abstract>
    <DeclaredIn>hhn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nu</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a67a10168f25e0f4107c2f1552f9f2065</Anchor>
    <Abstract>Intrinsic noise. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gNa</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a3fc1950a874b75d8929e267eb4747b3a</Anchor>
    <Abstract>Maximal conductivity for sodium current. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gK</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a93b792a252e0ec856e2414dc9764dc41</Anchor>
    <Abstract>Maximal conductivity for potassium current. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gL</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a13698f27be0ecbdb8350e409fa6d22a9</Anchor>
    <Abstract>Maximal conductivity for leakage current. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>vNa</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>aa548e35e1d41af7ccbe6c722eef6629d</Anchor>
    <Abstract>Reverse potential of sodium current [mV]. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>vK</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a76d1afa8a0669514d308cac0b2401061</Anchor>
    <Abstract>Reverse potential of potassium current [mV]. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>vL</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a3a85151b81cea60624478373b7bd2ba1</Anchor>
    <Abstract>Reverse potential of leakage current [mV]. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>vRest</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>ac92cd3befda21fb5c97b762c6bb4cad2</Anchor>
    <Abstract>Rest potential [mV]. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Icn1</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>ac3179223fb136031f41aabe161698995</Anchor>
    <Abstract>External current [mV] for central element 1. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Icn2</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>aaa5ea68dce0719e8262eaca8aa92fdfd</Anchor>
    <Abstract>External current [mV] for central element 2. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Vsyninh</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a5ccf29231e111865785e1b567a26981c</Anchor>
    <Abstract>Synaptic reversal potential [mV] for inhibitory effects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Vsynexc</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>ac9884e0196737015c159526a7a3e171e</Anchor>
    <Abstract>Synaptic reversal potential [mV] for exciting effects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>alfa_inhibitory</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>ab3706ced1b9060770948cfd5a7c730aa</Anchor>
    <Abstract>Alfa-parameter for alfa-function for inhibitory effect. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>betta_inhibitory</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>ac698fa240863fee29a4e8b74ad94b846</Anchor>
    <Abstract>Betta-parameter for alfa-function for inhibitory effect. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>alfa_excitatory</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>adf9bffc785c8bc6ba2fe29aae78973b9</Anchor>
    <Abstract>Alfa-parameter for alfa-function for excitatory effect. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>betta_excitatory</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a6e3b6e9f29d68de234dff83cd54d1bb2</Anchor>
    <Abstract>Betta-parameter for alfa-function for excitatory effect. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>w1</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a25a85bf8d33aad794544d095447a3ce9</Anchor>
    <Abstract>Strength of the synaptic connection from PN to CN1. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>w2</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a6ec72e5b9612826ea5d5b6c0f9c24e34</Anchor>
    <Abstract>Strength of the synaptic connection from CN1 to PN. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>w3</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a159496f27e728dd92962b0fe78bf33a7</Anchor>
    <Abstract>Strength of the synaptic connection from CN2 to PN. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deltah</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a33429340944f1f0169f306f8780fc467</Anchor>
    <Abstract>Period of time [ms] when high strength value of synaptic connection exists from CN2 to PN...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>threshold</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a5d7e4a2d4a3e61fc368667201e9bc4b5</Anchor>
    <Abstract>Threshold of the membrane potential that should exceeded by oscillator to be considered as an active...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eps</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.hhn.hhn_parameters</Scope>
    </TokenIdentifier>
    <Path>da/d72/classpyclustering_1_1nnet_1_1hhn_1_1hhn__parameters.html</Path>
    <Anchor>a59283dc4022783bc63bd25452d8a2bf1</Anchor>
    <Abstract>Affects pulse counter. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hysteresis</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::hysteresis</Scope>
    </TokenIdentifier>
    <Path>dc/d47/namespacepyclustering_1_1nnet_1_1hysteresis.html</Path>
    <Abstract>Neural Network: Hysteresis Oscillatory Network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hysteresis::hysteresis_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Abstract>Represents output dynamic of hysteresis oscillatory network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>a0adcc54ff54620662182c2e989c9640e</Anchor>
    <Abstract>(list) Returns outputs of oscillator during simulation. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>ad00a2aa0531e98dfea5fb89dc73a0a8c</Anchor>
    <Abstract>(list) Returns sampling times when dynamic is measured during simulation. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>a8d7ce865e5d119314ed2df87744d9ef6</Anchor>
    <Abstract>Constructor of hysteresis neural network dynamic. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>af8a3052f0886661bbd486be34736bfe7</Anchor>
    <Abstract>(uint) Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_dynamic</Scope>
    </TokenIdentifier>
    <Path>d8/d15/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__dynamic.html</Path>
    <Anchor>a9294da08287f9bc0dcb1d767541c0360</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hysteresis::hysteresis_network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Abstract>Hysteresis oscillatory network that uses relaxation oscillators that are represented by objective hys...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a0530c54a541e51868b2b67671b3bfc96</Anchor>
    <Abstract>Returns current outputs of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a24eae656c072dfceab1c075e69807991</Anchor>
    <Abstract>Sets outputs of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>states</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a5ccfe533dc92d0b950b7062d2c310f53</Anchor>
    <Abstract>Return current states of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>states</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a5400ac4b7441e0e1f029226a969e4b8a</Anchor>
    <Abstract>Set current states of neurons. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a7b400bd37e5c1eec4b51be7a668006f5</Anchor>
    <Abstract>Constructor of hysteresis oscillatory network. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a0a09ab4f3984abf814a8bf1be8069baa</Anchor>
    <Abstract>Performs static simulation of hysteresis oscillatory network. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_network</Scope>
    </TokenIdentifier>
    <Path>dd/dea/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__network.html</Path>
    <Anchor>a461ea7ef6d5cb22e009017ecc209859e</Anchor>
    <Abstract>Performs static simulation of hysteresis oscillatory network. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::hysteresis::hysteresis_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_visualizer</Scope>
    </TokenIdentifier>
    <Path>d0/d29/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__visualizer.html</Path>
    <Abstract>Visualizer of output dynamic of hysteresis oscillatory network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.hysteresis.hysteresis_visualizer</Scope>
    </TokenIdentifier>
    <Path>d0/d29/classpyclustering_1_1nnet_1_1hysteresis_1_1hysteresis__visualizer.html</Path>
    <Anchor>a0eaee8c7b0e4df39826a84a75308a046</Anchor>
    <Abstract>Shows output dynamic (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>hysteresis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::legion</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::legion</Scope>
    </TokenIdentifier>
    <Path>de/d0f/namespacepyclustering_1_1nnet_1_1legion.html</Path>
    <Abstract>Neural Network: Local Excitatory Global Inhibitory Oscillatory Network (LEGION) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::legion::legion_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Abstract>Represents output dynamic of LEGION. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Anchor>a4b0d3c96536a984745e92670b46d8f20</Anchor>
    <Abstract>Returns output dynamic of the network. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inhibitor</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Anchor>a808b3f4fef11101bc7cfabc1e51d0dea</Anchor>
    <Abstract>Returns output dynamic of the global inhibitor of the network. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Anchor>a63cc9d7066c08be959714dea260cee3b</Anchor>
    <Abstract>Returns simulation time. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Anchor>a74644232e9ab9d5233305ebc1fb5e1b3</Anchor>
    <Abstract>Constructor of legion dynamic. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Anchor>abb3fd013b92927aef240ff2c584c463b</Anchor>
    <Abstract>Destructor of the dynamic of the legion network. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Anchor>a80cf16f0e0c45db51419df7ef252a113</Anchor>
    <Abstract>Returns length of output dynamic. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_dynamic</Scope>
    </TokenIdentifier>
    <Path>da/db1/classpyclustering_1_1nnet_1_1legion_1_1legion__dynamic.html</Path>
    <Anchor>a04eb6f48adef0192a134176cf8afd34f</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::legion::legion_network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.legion.legion_network</Scope>
    </TokenIdentifier>
    <Path>d4/dc2/classpyclustering_1_1nnet_1_1legion_1_1legion__network.html</Path>
    <Abstract>Local excitatory global inhibitory oscillatory network (LEGION) that uses relaxation oscillator based...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_network</Scope>
    </TokenIdentifier>
    <Path>d4/dc2/classpyclustering_1_1nnet_1_1legion_1_1legion__network.html</Path>
    <Anchor>a9977c3d78b3c1f3ecc4154c751edf2ac</Anchor>
    <Abstract>Constructor of oscillatory network LEGION (local excitatory global inhibitory oscillatory network)...</Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_network</Scope>
    </TokenIdentifier>
    <Path>d4/dc2/classpyclustering_1_1nnet_1_1legion_1_1legion__network.html</Path>
    <Anchor>afc4e10e6e3c5780ec177bb2d4fc0f38b</Anchor>
    <Abstract>Default destructor of LEGION. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_network</Scope>
    </TokenIdentifier>
    <Path>d4/dc2/classpyclustering_1_1nnet_1_1legion_1_1legion__network.html</Path>
    <Anchor>aac7e7b612edab3c208cf6408299bda25</Anchor>
    <Abstract>(uint) Returns size of LEGION. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_network</Scope>
    </TokenIdentifier>
    <Path>d4/dc2/classpyclustering_1_1nnet_1_1legion_1_1legion__network.html</Path>
    <Anchor>ad115bc34517e9bbb9d7eb8f95fa23247</Anchor>
    <Abstract>Performs static simulation of LEGION oscillatory network. </Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::legion::legion_parameters</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Abstract>Describes parameters of LEGION. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a0512b7758a5870e7b95ab8d14c5c2add</Anchor>
    <Abstract>Default constructor of parameters for LEGION (local excitatory global inhibitory oscillatory network)...</Abstract>
    <DeclaredIn>legion.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eps</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>ac3a238cb07ee5d091e124dcbe0918439</Anchor>
    <Abstract>Coefficient that affects intrinsic inhibitor of each oscillator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>alpha</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a8551c4cf8433f30a92ec29dd3e642e69</Anchor>
    <Abstract>Coefficient is chosen to be on the same order of magnitude as &amp;#39;eps&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gamma</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a32ebbdbf786a9e5f8ca0cf631c9d57bc</Anchor>
    <Abstract>Coefficient that is used to control the ratio of the times that the solution spends in these two phas...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>betta</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>ab1a9f5919439ea3e9886d4ffaaaacae9</Anchor>
    <Abstract>Coefficient that affects on intrinsic inhibitor of each oscillator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>lamda</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a20e389842f8f948df430ccdd17ffb03f</Anchor>
    <Abstract>Scale coefficient that is used by potential, should be greater than 0. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>teta</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a5ea1e38c5d4094b7eb0c0f3cde31c150</Anchor>
    <Abstract>Threshold that should be exceeded by a potential to switch on potential. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>teta_x</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a941bf1dbdf22194446915e378c58616d</Anchor>
    <Abstract>Threshold that should be exceeded by a single oscillator to affect its neighbors. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>teta_p</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a1ada24fe2ff2fbe4763f92e6a938dbe6</Anchor>
    <Abstract>Threshold that should be exceeded to activate potential. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>teta_xz</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>ace403b11b5d2638c3769802514b19aa8</Anchor>
    <Abstract>Threshold that should be exceeded by any oscillator to activate global inhibitor. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>teta_zx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>ad08cededb14651f3713bdc6f66fdb569</Anchor>
    <Abstract>Threshold that should be exceeded to affect on a oscillator by the global inhibitor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>T</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>ac04282f2c95614e34348f439042e4cd7</Anchor>
    <Abstract>Weight of permanent connections. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mu</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>af31c5f70f3737923db95b9b5a8516bee</Anchor>
    <Abstract>Defines time scaling of relaxing of oscillator potential. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Wz</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>abe4f69f0f32516945d8a9365cf116c8a</Anchor>
    <Abstract>Weight of global inhibitory connections. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Wt</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>aa06feee2749c212640b9cf3999910aaf</Anchor>
    <Abstract>Total dynamic weights to a single oscillator from neighbors. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fi</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a3b4d77fe9ad31147dd1cc349a2945a2d</Anchor>
    <Abstract>Rate at which the global inhibitor reacts to the stimulation from the oscillator network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ro</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>af7f878b06fbad272b7c4183830c3ce10</Anchor>
    <Abstract>Multiplier of oscillator noise. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>I</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>ad011e5635ff4dc995a08eaf9bcdd8046</Anchor>
    <Abstract>Value of external stimulus. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ENABLE_POTENTIONAL</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.legion.legion_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/deb/classpyclustering_1_1nnet_1_1legion_1_1legion__parameters.html</Path>
    <Anchor>a2f42103d5919893aaa5ad56c4c245773</Anchor>
    <Abstract>Defines whether to use potentional of oscillator or not. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::pcnn</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::pcnn</Scope>
    </TokenIdentifier>
    <Path>d4/ddb/namespacepyclustering_1_1nnet_1_1pcnn.html</Path>
    <Abstract>Neural Network: Pulse Coupled Neural Network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::pcnn::pcnn_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Abstract>Represents output dynamic of PCNN (pulse-coupled neural network). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>a93edd4c3a91e92bd6a1572d5b7fedb47</Anchor>
    <Abstract>(list) Returns oscillato outputs during simulation. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>aa9f551f8c2c6a4a81706b369d9001285</Anchor>
    <Abstract>(list) Returns sampling times when dynamic is measured during simulation. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>a49d5f5f5e417f34c5080c4ea52a140b5</Anchor>
    <Abstract>Constructor of PCNN dynamic. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>aa1d5221a2a2bc9394fa458e178635ab4</Anchor>
    <Abstract>Default destructor of PCNN dynamic. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>adbb77eab54c22c5b5e48240a9f2d7af1</Anchor>
    <Abstract>(uint) Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>a36e2afdc7fcd7d28ad238eae44baaca7</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_spike_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>a74c8771357abe4c0413ce44fba82ee68</Anchor>
    <Abstract>Analyses output dynamic of network and allocates spikes on each iteration as a list of indexes of osc...</Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_time_signal</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_dynamic</Scope>
    </TokenIdentifier>
    <Path>d5/d01/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__dynamic.html</Path>
    <Anchor>a28f9f7de733eaae52cc68415239eb872</Anchor>
    <Abstract>Analyses output dynamic and calculates time signal (signal vector information) of network output...</Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::pcnn::pcnn_network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_network</Scope>
    </TokenIdentifier>
    <Path>d0/da2/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__network.html</Path>
    <Abstract>Model of oscillatory network that is based on the Eckhorn model. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_network</Scope>
    </TokenIdentifier>
    <Path>d0/da2/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__network.html</Path>
    <Anchor>a677242f8c239c176f4ef0b7dccfda533</Anchor>
    <Abstract>Constructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_network</Scope>
    </TokenIdentifier>
    <Path>d0/da2/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__network.html</Path>
    <Anchor>ab74a8fe092802f16ef4c672ea352969b</Anchor>
    <Abstract>Default destructor of PCNN. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_network</Scope>
    </TokenIdentifier>
    <Path>d0/da2/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__network.html</Path>
    <Anchor>a453235b0cc44c6e55294203f279e6c17</Anchor>
    <Abstract>(uint) Returns size of oscillatory network. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_network</Scope>
    </TokenIdentifier>
    <Path>d0/da2/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__network.html</Path>
    <Anchor>ae45c2a6eb7c48dce7a0ab6777096389d</Anchor>
    <Abstract>Performs static simulation of pulse coupled neural network using. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::pcnn::pcnn_parameters</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Abstract>Parameters for pulse coupled neural network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>afffa2f6072317f7eab2cb74afe8c67c8</Anchor>
    <Abstract>Default constructor of parameters for pulse-coupled neural network. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VF</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>ad03d2e6dadd3b6c1bc73633967843430</Anchor>
    <Abstract>Multiplier for the feeding compartment at the current step. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VL</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a334cd9842969dcf3e634cd8d2fa84507</Anchor>
    <Abstract>Multiplier for the linking compartment at the current step. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VT</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a2e27dc0fb181cec2f30038c083bc7cce</Anchor>
    <Abstract>Multiplier for the threshold at the current step. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AF</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a2d0f0d5b6479d82be039df167d40abdd</Anchor>
    <Abstract>Multiplier for the feeding compartment at the previous step. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AL</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a20b6c19bde86389f22199fc51bba2e85</Anchor>
    <Abstract>Multiplier for the linking compartment at the previous step. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AT</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a1fcfcaa4612e3a5eb78c47f4850d2325</Anchor>
    <Abstract>Multiplier for the threshold at the previous step. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>W</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a8914c7ef0099937e0608d8d310503246</Anchor>
    <Abstract>Synaptic weight - neighbours influence on linking compartment. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>M</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>aeca44347152acf6367593be4108cd2a0</Anchor>
    <Abstract>Synaptic weight - neighbours influence on feeding compartment. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>B</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a7458afd40d43c289e2ecc057b9910b5b</Anchor>
    <Abstract>Linking strength in the network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FAST_LINKING</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_parameters</Scope>
    </TokenIdentifier>
    <Path>d4/d87/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__parameters.html</Path>
    <Anchor>a5c7aa02bc7fa8f59240bcc150485a750</Anchor>
    <Abstract>Enable/disable Fast-Linking mode. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::pcnn::pcnn_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>da/d34/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__visualizer.html</Path>
    <Abstract>Visualizer of output dynamic of pulse-coupled neural network (PCNN). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_time_signal</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>da/d34/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__visualizer.html</Path>
    <Anchor>af05036ce3def13bc751e3e907274bf2a</Anchor>
    <Abstract>Shows time signal (signal vector information) using network dynamic during simulation. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>da/d34/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__visualizer.html</Path>
    <Anchor>a32a6afbed78b301170410164fe61a0a0</Anchor>
    <Abstract>Shows output dynamic (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_spike_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.pcnn.pcnn_visualizer</Scope>
    </TokenIdentifier>
    <Path>da/d34/classpyclustering_1_1nnet_1_1pcnn_1_1pcnn__visualizer.html</Path>
    <Anchor>af1a710c17c6928b793205f09e331621f</Anchor>
    <Abstract>Shows animation of output dynamic (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>pcnn.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::som</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::som</Scope>
    </TokenIdentifier>
    <Path>d1/d96/namespacepyclustering_1_1nnet_1_1som.html</Path>
    <Abstract>Neural Network: Self-Organized Feature Map. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::som::som</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Abstract>Represents self-organized feature map (SOM). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>afb73e751cfad10d41864ccf4b4892cdf</Anchor>
    <Abstract>Return size of self-organized map that is defined by total number of neurons. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>weights</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a629c2e019bf2191e1ec4fb5c46e366e7</Anchor>
    <Abstract>Return weight of each neuron. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>awards</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a0e75af7a52e4e8cbab864a341f589bfe</Anchor>
    <Abstract>Return amount of captured objects by each neuron after training. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>capture_objects</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a221b0d03a929ad899583ea9c44a3c8d7</Anchor>
    <Abstract>Returns indexes of captured objects by each neuron. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a0c3574787b3a747b192aca9299cbeab2</Anchor>
    <Abstract>Constructor of self-organized map. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>ab5764215075a7b39e118877e0ffb9c49</Anchor>
    <Abstract>Destructor of the self-organized feature map. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>acc6933dfefeff395e743c4dde444c1d7</Anchor>
    <Abstract>Returns size of the network that defines by amount of neuron in it. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__getstate__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a06fb84a4f87fb55bb276f69234c77680</Anchor>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__setstate__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>afcd0f9be4d35067c06ae11e49e9ea925</Anchor>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>train</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a6e0e67d0de61ff6812b765c3dbe56696</Anchor>
    <Abstract>Trains self-organized feature map (SOM). </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>ad64626e29e6a6e4cb6ae9c4eb0c7251f</Anchor>
    <Abstract>Processes input pattern (no learining) and returns index of neuron-winner. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_winner_number</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a90a4b61add214c43e4ab2b6dc2ab9fe7</Anchor>
    <Abstract>Calculates number of winner at the last step of learning process. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_distance_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a3a995876508be6dab2aa31c8af55e194</Anchor>
    <Abstract>Shows gray visualization of U-matrix (distance matrix). </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_distance_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a979964e0d403bfddf5225634c4daf1a6</Anchor>
    <Abstract>Calculates distance matrix (U-matrix). </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_density_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a581be889e37d2a2017f3e32fb3584cd8</Anchor>
    <Abstract>Show density matrix (P-matrix) using kernel density estimation. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_density_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>a7fe4d9576faa1ca6449c5ad8aeda9b60</Anchor>
    <Abstract>Calculates density matrix (P-Matrix). </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_winner_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>ad999fbcc1f1b96d6ce3df2e9824e4d3d</Anchor>
    <Abstract>Show winner matrix where each element corresponds to neuron and value represents amount of won object...</Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_network</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som</Scope>
    </TokenIdentifier>
    <Path>d7/d7b/classpyclustering_1_1nnet_1_1som_1_1som.html</Path>
    <Anchor>ab8a150be3f6a0b435630eb0f9834a284</Anchor>
    <Abstract>Shows neurons in the dimension of data. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::som::som_parameters</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.som.som_parameters</Scope>
    </TokenIdentifier>
    <Path>d2/da8/classpyclustering_1_1nnet_1_1som_1_1som__parameters.html</Path>
    <Abstract>Represents SOM parameters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.som.som_parameters</Scope>
    </TokenIdentifier>
    <Path>d2/da8/classpyclustering_1_1nnet_1_1som_1_1som__parameters.html</Path>
    <Anchor>ac3ca2dde9997dbe8a3287aaf212796d7</Anchor>
    <Abstract>Constructor container of SOM parameters. </Abstract>
    <DeclaredIn>som.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init_type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.som_parameters</Scope>
    </TokenIdentifier>
    <Path>d2/da8/classpyclustering_1_1nnet_1_1som_1_1som__parameters.html</Path>
    <Anchor>aeee87a8f7d6c6855eeb8de63653db8c5</Anchor>
    <Abstract>Type of initialization of initial neuron weights (random, random in center of the input data...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init_radius</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.som_parameters</Scope>
    </TokenIdentifier>
    <Path>d2/da8/classpyclustering_1_1nnet_1_1som_1_1som__parameters.html</Path>
    <Anchor>a2202e66a7404334d4545bdb5dfcfa8f7</Anchor>
    <Abstract>Initial radius (if not specified then will be calculated by SOM). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init_learn_rate</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.som_parameters</Scope>
    </TokenIdentifier>
    <Path>d2/da8/classpyclustering_1_1nnet_1_1som_1_1som__parameters.html</Path>
    <Anchor>a6c41e5e691b80dd49388b1e8a43f5e22</Anchor>
    <Abstract>Rate of learning. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>adaptation_threshold</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.som_parameters</Scope>
    </TokenIdentifier>
    <Path>d2/da8/classpyclustering_1_1nnet_1_1som_1_1som__parameters.html</Path>
    <Anchor>ac70254e6e9363541891c7139d85b6cf7</Anchor>
    <Abstract>Condition when learining process should be stoped. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::som::type_conn</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.som.type_conn</Scope>
    </TokenIdentifier>
    <Path>da/d42/classpyclustering_1_1nnet_1_1som_1_1type__conn.html</Path>
    <Abstract>Enumeration of connection types for SOM. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grid_four</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_conn</Scope>
    </TokenIdentifier>
    <Path>da/d42/classpyclustering_1_1nnet_1_1som_1_1type__conn.html</Path>
    <Anchor>a048b5720c59ba1f0e64fd55959de4941</Anchor>
    <Abstract>Grid type of connections when each oscillator has connections with left, upper, right, lower neighbors. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grid_eight</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_conn</Scope>
    </TokenIdentifier>
    <Path>da/d42/classpyclustering_1_1nnet_1_1som_1_1type__conn.html</Path>
    <Anchor>a3841ee22472fad31c30c048f67811a88</Anchor>
    <Abstract>Grid type of connections when each oscillator has connections with left, upper-left, upper, upper-right, right, right-lower, lower, lower-left neighbors. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>honeycomb</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_conn</Scope>
    </TokenIdentifier>
    <Path>da/d42/classpyclustering_1_1nnet_1_1som_1_1type__conn.html</Path>
    <Anchor>afcd37767307d2e1bb1088fc6ccda3457</Anchor>
    <Abstract>Grid type of connections when each oscillator has connections with left, upper-left, upper-right, right, right-lower, lower-left neighbors. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>func_neighbor</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_conn</Scope>
    </TokenIdentifier>
    <Path>da/d42/classpyclustering_1_1nnet_1_1som_1_1type__conn.html</Path>
    <Anchor>a5a2d24d81d54cebe882d646def7a3440</Anchor>
    <Abstract>Grid type of connections when existance of each connection is defined by the SOM rule on each step of...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::som::type_init</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.som.type_init</Scope>
    </TokenIdentifier>
    <Path>df/d7b/classpyclustering_1_1nnet_1_1som_1_1type__init.html</Path>
    <Abstract>Enumeration of initialization types for SOM. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>random</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_init</Scope>
    </TokenIdentifier>
    <Path>df/d7b/classpyclustering_1_1nnet_1_1som_1_1type__init.html</Path>
    <Anchor>a354ef0687f6998dfba167bfc308af012</Anchor>
    <Abstract>Weights are randomly distributed using Gaussian distribution (0, 1). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>random_centroid</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_init</Scope>
    </TokenIdentifier>
    <Path>df/d7b/classpyclustering_1_1nnet_1_1som_1_1type__init.html</Path>
    <Anchor>a4635cffe33743e547676ceb9b8bdf1a4</Anchor>
    <Abstract>Weights are randomly distributed using Gaussian distribution (input data centroid, 1). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>random_surface</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_init</Scope>
    </TokenIdentifier>
    <Path>df/d7b/classpyclustering_1_1nnet_1_1som_1_1type__init.html</Path>
    <Anchor>a5e17ed481877b47eb010983cc0883bb8</Anchor>
    <Abstract>Weights are randomly distrbiuted using Gaussian distribution (input data centroid, surface of input data). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform_grid</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.nnet.som.type_init</Scope>
    </TokenIdentifier>
    <Path>df/d7b/classpyclustering_1_1nnet_1_1som_1_1type__init.html</Path>
    <Anchor>a10b7f63aad15fc41690d50f1f8e3706e</Anchor>
    <Abstract>Weights are distributed as a uniform grid that covers whole surface of the input data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::sync</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::sync</Scope>
    </TokenIdentifier>
    <Path>dc/d34/namespacepyclustering_1_1nnet_1_1sync.html</Path>
    <Abstract>Neural Network: Oscillatory Neural Network based on Kuramoto model. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::sync::order_estimator</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.sync.order_estimator</Scope>
    </TokenIdentifier>
    <Path>db/ddc/classpyclustering_1_1nnet_1_1sync_1_1order__estimator.html</Path>
    <Abstract>Provides services to calculate order parameter and local order parameter that are used for synchroniz...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_sync_order</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.order_estimator</Scope>
    </TokenIdentifier>
    <Path>db/ddc/classpyclustering_1_1nnet_1_1sync_1_1order__estimator.html</Path>
    <Anchor>a7b49bc590be0baa26b7395e828d3421d</Anchor>
    <Abstract>Calculates level of global synchronization (order parameter) for input phases. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_local_sync_order</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.order_estimator</Scope>
    </TokenIdentifier>
    <Path>db/ddc/classpyclustering_1_1nnet_1_1sync_1_1order__estimator.html</Path>
    <Anchor>a0edf6b9a0bc9123e71b3393a000a245e</Anchor>
    <Abstract>Calculates level of local synchorization (local order parameter) for input phases for the specified n...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::sync::sync_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Abstract>Represents output dynamic of Sync. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a218702c7c078387e54bb8ea94a81a818</Anchor>
    <Abstract>(list) Returns output dynamic of the Sync network (phase coordinates of each oscillator in the networ...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a91fdb6b0efab62a7c8a046ea45b49d44</Anchor>
    <Abstract>(list) Returns sampling times when dynamic is measured during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a99376c9fe25182c5fba1ca3e5116349d</Anchor>
    <Abstract>Constructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a2c08fb4d750f456fef48afeddc0daeb0</Anchor>
    <Abstract>Default destructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aacc3380b1a85eab88c13fe237c1e0dfa</Anchor>
    <Abstract>Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__getitem__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a14746ba3c7b2eaad75f84754c1088f77</Anchor>
    <Abstract>Indexing of the dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a4f3c8155c31a1e6df48d3455e3f9cc54</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>ac1095b7b3e5597eff50b23b02c5a6c8b</Anchor>
    <Abstract>Returns 2D matrix of phase values of oscillators at the specified iteration of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a225da35991a7ab5fa5922d0194e8b729</Anchor>
    <Abstract>Allocate correlation matrix between oscillators at the specified step of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aa7785daff161a5f5e359699699880f84</Anchor>
    <Abstract>Calculates level of global synchorization (order parameter). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_local_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>af4ba96d7adf1c0786340d295489374a0</Anchor>
    <Abstract>Calculates local order parameter. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::sync::sync_network</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Abstract>Model of oscillatory network that is based on the Kuramoto model of synchronization. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a6c559dfa166ad2ff2ae4bfceb8ee7ffc</Anchor>
    <Abstract>Constructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a9252c8e7c094aea2ffd6494df8c63ee8</Anchor>
    <Abstract>Destructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ae1cae6c1af46d4617b7c3561b38a2d24</Anchor>
    <Abstract>Calculates current level of global synchorization (order parameter) in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_local_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>adbc01ffd91284cad3a2f06da0b399805</Anchor>
    <Abstract>Calculates current level of local (partial) synchronization in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a3acee8446ba88cfbc400ed0d326d0191</Anchor>
    <Abstract>Performs static simulation of Sync oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ab4d1e9c5af1a761b0ee9f3d7814c9e4e</Anchor>
    <Abstract>Performs dynamic simulation of the network until stop condition is not reached. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ad1d77b799a8113316532254008bc60c4</Anchor>
    <Abstract>Performs static simulation of oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a48bfa8764203f8e0ae1bf5353134df2d</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a2c38c23193f77cfde9f989197297151e</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::sync::sync_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Abstract>Visualizer of output dynamic of sync network (Sync). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aaf74d851a03b8a5b0f05ec36918642c8</Anchor>
    <Abstract>Shows output dynamic (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamics</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aece8f22f0fce2276360981a3e9765054</Anchor>
    <Abstract>Shows several output dynamics (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aa52476f3d9f38a326ba0bf56ca3c44de</Anchor>
    <Abstract>Shows correlation matrix between oscillators at the specified iteration. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a5c4f345375c308120cd57a21e4f9ae57</Anchor>
    <Abstract>Shows 2D matrix of phase values of oscillators at the specified iteration. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a60b627a2d0e133d7786ad9f3a1e66f7a</Anchor>
    <Abstract>Shows evolution of order parameter (level of global synchronization in the network). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_local_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a3264d951231a526b3182d6ba5e40954e</Anchor>
    <Abstract>Shows evolution of local order parameter (level of local synchronization in the network). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aea4b9f69e01001a73bc6fc5c6bf1ef8d</Anchor>
    <Abstract>Shows animation of output dynamic (output of each oscillator) during simulation on a circle from [0; ...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a98db73bd2c831c23d3fed89eaa9e711d</Anchor>
    <Abstract>Shows animation of correlation matrix between oscillators during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a70724b4778055b15ce050efad5cc1b6c</Anchor>
    <Abstract>Shows animation of phase matrix between oscillators during simulation on 2D stage. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a5273393929a41400f8d99c21755bd857</Anchor>
    <Abstract>Shows animation of phase coordinates and animation of correlation matrix together for the Sync dynami...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncpr</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::syncpr</Scope>
    </TokenIdentifier>
    <Path>d1/d53/namespacepyclustering_1_1nnet_1_1syncpr.html</Path>
    <Abstract>Phase oscillatory network for patten recognition based on modified Kuramoto model. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncpr::syncpr</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Abstract>Model of phase oscillatory network for pattern recognition that is based on the Kuramoto model...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>a90a3eba408ac4160c20df52ce6c61944</Anchor>
    <Abstract>Constructor of oscillatory network for pattern recognition based on Kuramoto model. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>a0c61797c91036fe990e7dbeb4a7fdf94</Anchor>
    <Abstract>Default destructor of syncpr. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>af8cafb06e4f7cdc316d1a96795092f71</Anchor>
    <Abstract>Returns size of the network. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>train</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>af0a1d03fa453b0bcee276b44321be32a</Anchor>
    <Abstract>Trains syncpr network using Hebbian rule for adjusting strength of connections between oscillators du...</Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>a2db668219e716794feb5b3a7177e1e14</Anchor>
    <Abstract>Performs static simulation of syncpr oscillatory network. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>a85e363b0c68ba637094369ea89e9a5f0</Anchor>
    <Abstract>Performs dynamic simulation of the network until stop condition is not reached. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>a5f2cb8d084e029ba0e7f96e82c8ed0d1</Anchor>
    <Abstract>Performs static simulation of syncpr oscillatory network. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr</Scope>
    </TokenIdentifier>
    <Path>d8/d08/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr.html</Path>
    <Anchor>a0ed2ba548180bd060007826aeb35fa82</Anchor>
    <Abstract>Calculates function of the memorized pattern. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a6c559dfa166ad2ff2ae4bfceb8ee7ffc</Anchor>
    <Abstract>Constructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a9252c8e7c094aea2ffd6494df8c63ee8</Anchor>
    <Abstract>Destructor of oscillatory network is based on Kuramoto model. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ae1cae6c1af46d4617b7c3561b38a2d24</Anchor>
    <Abstract>Calculates current level of global synchorization (order parameter) in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sync_local_order</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>adbc01ffd91284cad3a2f06da0b399805</Anchor>
    <Abstract>Calculates current level of local (partial) synchronization in the network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a3acee8446ba88cfbc400ed0d326d0191</Anchor>
    <Abstract>Performs static simulation of Sync oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ab4d1e9c5af1a761b0ee9f3d7814c9e4e</Anchor>
    <Abstract>Performs dynamic simulation of the network until stop condition is not reached. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simulate_static</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>ad1d77b799a8113316532254008bc60c4</Anchor>
    <Abstract>Performs static simulation of oscillatory network. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a48bfa8764203f8e0ae1bf5353134df2d</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_network</Scope>
    </TokenIdentifier>
    <Path>db/de3/classpyclustering_1_1nnet_1_1sync_1_1sync__network.html</Path>
    <Anchor>a2c38c23193f77cfde9f989197297151e</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>ac6f327785dadf0b3ca8156f59273eba7</Anchor>
    <Abstract>Height of the network grid (that is defined by amout of oscillators in each column), this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a31552414c3e4ca131e6dac886d90028e</Anchor>
    <Abstract>Width of the network grid, this value is zero in case of non-grid structure. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structure</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>aeb3c0d1643c214ae26654e808296869c</Anchor>
    <Abstract>Type of network structure that is used for connecting oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a3179162d6f4e140e1af56bc027c958ee</Anchor>
    <Abstract>Constructor of the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2fbd8c6d2e322caa09dff1471f548695</Anchor>
    <Abstract>Returns size of the network that is defined by amount of oscillators. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>has_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a2daf6e0dc12067d723750f788c8239a4</Anchor>
    <Abstract>Returns True if there is connection between i and j oscillators and False - if connection doesn&amp;#39;t exi...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_connection</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>abf0dff19353bd3b0b1af1659ec847c47</Anchor>
    <Abstract>Couples two specified oscillators in the network with dynamic connections. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_neighbors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.network</Scope>
    </TokenIdentifier>
    <Path>d5/d9f/classpyclustering_1_1nnet_1_1network.html</Path>
    <Anchor>a07f432adab8f44c201ecef079ecd9c99</Anchor>
    <Abstract>Finds neighbors of the oscillator with specified index. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncpr::syncpr_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr_dynamic</Scope>
    </TokenIdentifier>
    <Path>d3/deb/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr__dynamic.html</Path>
    <Abstract>Represents output dynamic of syncpr (Sync for Pattern Recognition). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr_dynamic</Scope>
    </TokenIdentifier>
    <Path>d3/deb/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr__dynamic.html</Path>
    <Anchor>a89cfbb5863d457129a27705f7dcd78e1</Anchor>
    <Abstract>Constructor of syncpr dynamic. </Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>output</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a218702c7c078387e54bb8ea94a81a818</Anchor>
    <Abstract>(list) Returns output dynamic of the Sync network (phase coordinates of each oscillator in the networ...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>time</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a91fdb6b0efab62a7c8a046ea45b49d44</Anchor>
    <Abstract>(list) Returns sampling times when dynamic is measured during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a99376c9fe25182c5fba1ca3e5116349d</Anchor>
    <Abstract>Constructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__del__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a2c08fb4d750f456fef48afeddc0daeb0</Anchor>
    <Abstract>Default destructor of Sync dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aacc3380b1a85eab88c13fe237c1e0dfa</Anchor>
    <Abstract>Returns number of simulation steps that are stored in dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__getitem__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a14746ba3c7b2eaad75f84754c1088f77</Anchor>
    <Abstract>Indexing of the dynamic. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a4f3c8155c31a1e6df48d3455e3f9cc54</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>ac1095b7b3e5597eff50b23b02c5a6c8b</Anchor>
    <Abstract>Returns 2D matrix of phase values of oscillators at the specified iteration of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>a225da35991a7ab5fa5922d0194e8b729</Anchor>
    <Abstract>Allocate correlation matrix between oscillators at the specified step of simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>aa7785daff161a5f5e359699699880f84</Anchor>
    <Abstract>Calculates level of global synchorization (order parameter). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_local_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.sync.sync_dynamic</Scope>
    </TokenIdentifier>
    <Path>dc/d2d/classpyclustering_1_1nnet_1_1sync_1_1sync__dynamic.html</Path>
    <Anchor>af4ba96d7adf1c0786340d295489374a0</Anchor>
    <Abstract>Calculates local order parameter. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncpr::syncpr_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr_visualizer</Scope>
    </TokenIdentifier>
    <Path>d2/d66/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr__visualizer.html</Path>
    <Abstract>Visualizer of output dynamic of syncpr network (Sync for Pattern Recognition). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_pattern</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr_visualizer</Scope>
    </TokenIdentifier>
    <Path>d2/d66/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr__visualizer.html</Path>
    <Anchor>ad26e23811fd9ebd693efee8dd9606855</Anchor>
    <Abstract>Displays evolution of phase oscillators as set of patterns where the last one means final result of r...</Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_pattern_recognition</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.syncpr.syncpr_visualizer</Scope>
    </TokenIdentifier>
    <Path>d2/d66/classpyclustering_1_1nnet_1_1syncpr_1_1syncpr__visualizer.html</Path>
    <Anchor>a927498d5516ff7429513b686e44c954b</Anchor>
    <Abstract>Shows animation of pattern recognition process that has been preformed by the oscillatory network...</Abstract>
    <DeclaredIn>syncpr.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aaf74d851a03b8a5b0f05ec36918642c8</Anchor>
    <Abstract>Shows output dynamic (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_output_dynamics</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aece8f22f0fce2276360981a3e9765054</Anchor>
    <Abstract>Shows several output dynamics (output of each oscillator) during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aa52476f3d9f38a326ba0bf56ca3c44de</Anchor>
    <Abstract>Shows correlation matrix between oscillators at the specified iteration. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a5c4f345375c308120cd57a21e4f9ae57</Anchor>
    <Abstract>Shows 2D matrix of phase values of oscillators at the specified iteration. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a60b627a2d0e133d7786ad9f3a1e66f7a</Anchor>
    <Abstract>Shows evolution of order parameter (level of global synchronization in the network). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_local_order_parameter</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a3264d951231a526b3182d6ba5e40954e</Anchor>
    <Abstract>Shows evolution of local order parameter (level of local synchronization in the network). </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_output_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>aea4b9f69e01001a73bc6fc5c6bf1ef8d</Anchor>
    <Abstract>Shows animation of output dynamic (output of each oscillator) during simulation on a circle from [0; ...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_correlation_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a98db73bd2c831c23d3fed89eaa9e711d</Anchor>
    <Abstract>Shows animation of correlation matrix between oscillators during simulation. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate_phase_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a70724b4778055b15ce050efad5cc1b6c</Anchor>
    <Abstract>Shows animation of phase matrix between oscillators during simulation on 2D stage. </Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>animate</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.sync.sync_visualizer</Scope>
    </TokenIdentifier>
    <Path>dc/d86/classpyclustering_1_1nnet_1_1sync_1_1sync__visualizer.html</Path>
    <Anchor>a5273393929a41400f8d99c21755bd857</Anchor>
    <Abstract>Shows animation of phase coordinates and animation of correlation matrix together for the Sync dynami...</Abstract>
    <DeclaredIn>sync.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncsegm</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::nnet::syncsegm</Scope>
    </TokenIdentifier>
    <Path>d2/d61/namespacepyclustering_1_1nnet_1_1syncsegm.html</Path>
    <Abstract>Double-layer oscillatory network with phase oscillator for image segmentation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncsegm::syncsegm</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm</Scope>
    </TokenIdentifier>
    <Path>d2/d81/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm.html</Path>
    <Abstract>Class represents segmentation algorithm syncsegm. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm</Scope>
    </TokenIdentifier>
    <Path>d2/d81/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm.html</Path>
    <Anchor>ac286a71e329f2fe7ed818346a365a774</Anchor>
    <Abstract>Contructor of the oscillatory network SYNC for cluster analysis. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm</Scope>
    </TokenIdentifier>
    <Path>d2/d81/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm.html</Path>
    <Anchor>ab9b844c8763f272ee012f7ede661caf5</Anchor>
    <Abstract>Performs image segmentation. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncsegm::syncsegm_analyser</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d38/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__analyser.html</Path>
    <Abstract>Performs analysis of output dynamic of the double-layer oscillatory network &amp;#39;syncsegm&amp;#39; to extract inf...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d38/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__analyser.html</Path>
    <Anchor>ac48ce67ea89f37e7a008d95635413c4e</Anchor>
    <Abstract>Constructor of the analyser. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_first_layer_analyser</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d38/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__analyser.html</Path>
    <Anchor>ac75ef8803cc233169d849c6d5a8acabb</Anchor>
    <Abstract>Returns analyser of coloring segmentation of the first layer. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_second_layer_analysers</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d38/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__analyser.html</Path>
    <Anchor>a116f11b5679b8d86fce24db6baa63d34</Anchor>
    <Abstract>Returns analysers of object segmentation of the second layer. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_colors</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d38/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__analyser.html</Path>
    <Anchor>a88f2cd32f70663d6bb5b61fc20c3eed0</Anchor>
    <Abstract>Allocates color segments. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_objects</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_analyser</Scope>
    </TokenIdentifier>
    <Path>da/d38/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__analyser.html</Path>
    <Anchor>a1dd2eb182a24186afda3fa9d1249c47a</Anchor>
    <Abstract>Allocates object segments. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::nnet::syncsegm::syncsegm_visualizer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_visualizer</Scope>
    </TokenIdentifier>
    <Path>dd/dae/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__visualizer.html</Path>
    <Abstract>Result visualizer of double-layer oscillatory network &amp;#39;syncsegm&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_first_layer_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_visualizer</Scope>
    </TokenIdentifier>
    <Path>dd/dae/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__visualizer.html</Path>
    <Anchor>a866f619c93a719640696434f5ce67cb5</Anchor>
    <Abstract>Shows output dynamic of the first layer. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>show_second_layer_dynamic</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.nnet.syncsegm.syncsegm_visualizer</Scope>
    </TokenIdentifier>
    <Path>dd/dae/classpyclustering_1_1nnet_1_1syncsegm_1_1syncsegm__visualizer.html</Path>
    <Anchor>ad66cb5a761e3580bae3a1d399fbb5b86</Anchor>
    <Abstract>Shows output dynamic of the second layer. </Abstract>
    <DeclaredIn>syncsegm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::samples</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::samples</Scope>
    </TokenIdentifier>
    <Path>d8/d12/namespacepyclustering_1_1samples.html</Path>
    <Abstract>pyclustering module for samples. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::samples::answer_reader</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.samples.answer_reader</Scope>
    </TokenIdentifier>
    <Path>df/d25/classpyclustering_1_1samples_1_1answer__reader.html</Path>
    <Abstract>Answer reader for samples that are used by pyclustering library. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.samples.answer_reader</Scope>
    </TokenIdentifier>
    <Path>df/d25/classpyclustering_1_1samples_1_1answer__reader.html</Path>
    <Anchor>a177a5646fb90f77bcf34a722f4a85ff2</Anchor>
    <Abstract>Creates instance of answer reader to read proper clustering results of samples. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.samples.answer_reader</Scope>
    </TokenIdentifier>
    <Path>df/d25/classpyclustering_1_1samples_1_1answer__reader.html</Path>
    <Anchor>aa0cb105debae37703d46b6d1b5765766</Anchor>
    <Abstract>Read proper clustering results. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_noise</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.samples.answer_reader</Scope>
    </TokenIdentifier>
    <Path>df/d25/classpyclustering_1_1samples_1_1answer__reader.html</Path>
    <Anchor>a55009a5b5ca701aeee55978c39bbba2b</Anchor>
    <Abstract>Read proper clustering results. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_cluster_lengths</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.samples.answer_reader</Scope>
    </TokenIdentifier>
    <Path>df/d25/classpyclustering_1_1samples_1_1answer__reader.html</Path>
    <Anchor>ad9ba7a5e8b42dd128f011e14845eaaba</Anchor>
    <Abstract>Read proper cluster lengths. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Abstract>Utils that are used by modules of pyclustering. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read_sample</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ac745f830ff5e61ef90a9b4eeeee1ea06</Anchor>
    <Abstract>Returns data sample from simple text file. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_distance_matrix</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>acdd9ff50fe9486615cdf4bc2abd854f8</Anchor>
    <Abstract>Calculates distance matrix for data sample (sequence of points) using specified metric (by default Eu...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read_image</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ac2717b7a9abfca7ffb317fea2fceec80</Anchor>
    <Abstract>Returns image as N-dimension (depends on the input image) matrix, where one element of list describes...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rgb2gray</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a283b923599447003681ee871cade6980</Anchor>
    <Abstract>Returns image as 1-dimension (gray colored) matrix, where one element of list describes pixel...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stretch_pattern</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a9661f6b436a9646aed71a1e7dfe5288c</Anchor>
    <Abstract>Returns stretched content as 1-dimension (gray colored) matrix with size of input image...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gray_pattern_borders</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a82f2e5027ddf1ec1e7c3ba0adfc2002f</Anchor>
    <Abstract>Returns coordinates of gray image content on the input image. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>average_neighbor_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a7823dd70dedd9113c7797d514740719a</Anchor>
    <Abstract>Returns average distance for establish links between specified number of nearest neighbors. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>medoid</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a38fcdaa08dc690629f72a3f9ced0b850</Anchor>
    <Abstract>Calculate medoid for input points using Euclidean distance. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>euclidean_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a92e3d0f5b1e92cea4d08cce0f5990600</Anchor>
    <Abstract>Calculate Euclidean distance between vector a and b. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>euclidean_distance_square</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a7e37cffef9b9bc93c6863915464626a8</Anchor>
    <Abstract>Calculate square Euclidian distance between vector a and b. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>manhattan_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a42c85c10d6344499445b78d3bdf02c6b</Anchor>
    <Abstract>Calculate Manhattan distance between vector a and b. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>average_inter_cluster_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a0f49a735e24a23f040c4c43fa9e87492</Anchor>
    <Abstract>Calculates average inter-cluster distance between two clusters. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>average_intra_cluster_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a6f097ba458b30e7c3ee98b2828589fb0</Anchor>
    <Abstract>Calculates average intra-cluster distance between two clusters. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>variance_increase_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a4bc02e6a15ee0fbf91ebf966ac83363f</Anchor>
    <Abstract>Calculates variance increase distance between two clusters. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>calculate_ellipse_description</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a86d1f2afa12a21509d8d5cbdab581f6c</Anchor>
    <Abstract>Calculates description of ellipse using covariance matrix. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data_corners</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a5619bf7da3a7b8532ab9a85cb20ef528</Anchor>
    <Abstract>Finds maximum and minimum corner in each dimension of the specified data. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>norm_vector</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a57c033208ba5b808f0b1284c1e8fe49c</Anchor>
    <Abstract>Calculates norm of an input vector that is known as a vector length. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>heaviside</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ad3e47d0f0d6074b2b59ca98781f882dd</Anchor>
    <Abstract>Calculates Heaviside function that represents step function. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timedcall</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>add1a019d4341c3c1a63d080d5c629f2f</Anchor>
    <Abstract>Executes specified method or function with measuring of execution time. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extract_number_oscillations</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a3677b4ca6346502d20783cff37984e32</Anchor>
    <Abstract>Extracts number of oscillations of specified oscillator. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allocate_sync_ensembles</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>aa20fd33e9de833440d6e5cb1d19fe676</Anchor>
    <Abstract>Allocate clusters in line with ensembles of synchronous oscillators where each synchronous ensemble c...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>draw_clusters</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ab437b7300a1bf001cf503dcf9ab06822</Anchor>
    <Abstract>Displays clusters for data in 2D or 3D. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>draw_dynamics</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a52cdeb5950b6f80070e4f9abce2a5bfc</Anchor>
    <Abstract>Draw dynamics of neurons (oscillators) in the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_ax_param</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a9e02aebdb187a083e3c87350319ce8fe</Anchor>
    <Abstract>Sets parameters for matplotlib ax. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>draw_dynamics_set</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ad36e53675e791789d48d440ff4fda7eb</Anchor>
    <Abstract>Draw lists of dynamics of neurons (oscillators) in the network. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>draw_image_color_segments</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a0fffb2cbb67eee1feb2177d14db7d0f8</Anchor>
    <Abstract>Shows image segments using colored image. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>draw_image_mask_segments</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a209c3df7ebb06e4b08b6350e0e01b2d0</Anchor>
    <Abstract>Shows image segments using black masks. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linear_sum</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ad908c0e87e62b602e09b7bab7be23e41</Anchor>
    <Abstract>Calculates linear sum of vector that is represented by list, each element can be represented by list ...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>square_sum</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a11b6a615ed45b1546597941048bd4689</Anchor>
    <Abstract>Calculates square sum of vector that is represented by list, each element can be represented by list ...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_subtraction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a36a497b111754284931d736762207aa8</Anchor>
    <Abstract>Calculates subtraction of two lists. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_substraction_number</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a8551746c511395a06d3b5d3569d6d690</Anchor>
    <Abstract>Calculates subtraction between list and number. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_addition</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ae1b429868cdd5839ca4821a54f77e770</Anchor>
    <Abstract>Addition of two lists. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_addition_number</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a5ec4d03bca30921ed7d158de406c3201</Anchor>
    <Abstract>Addition between list and number. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_division_number</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a29fb8d5aa7af1c22deb4f8479a1e4a62</Anchor>
    <Abstract>Division between list and number. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_division</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a8f7f04577183c4d4c0566dc27c8f8769</Anchor>
    <Abstract>Division of two lists. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_multiplication_number</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>a9c0a7faa64e5eda59b3e64deedc729b4</Anchor>
    <Abstract>Multiplication between list and number. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list_math_multiplication</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>af9f0b7016d475b98fdea614e84ee349f</Anchor>
    <Abstract>Multiplication of two lists. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pi</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering::utils</Scope>
    </TokenIdentifier>
    <Path>da/d28/namespacepyclustering_1_1utils.html</Path>
    <Anchor>ae3e5b942e518e920826979f86a00447f</Anchor>
    <Abstract>The number  is a mathematical constant, the ratio of a circle&amp;#39;s circumference to its diameter...</Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::color</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::utils::color</Scope>
    </TokenIdentifier>
    <Path>dc/d04/namespacepyclustering_1_1utils_1_1color.html</Path>
    <Abstract>Colors used by pyclustering library for visualization. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::color::color</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.utils.color.color</Scope>
    </TokenIdentifier>
    <Path>d3/d13/classpyclustering_1_1utils_1_1color_1_1color.html</Path>
    <Abstract>Consists titles of colors that are used by pyclustering for visualization. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_color</Name>
      <APILanguage>python</APILanguage>
      <Type>clm</Type>
      <Scope>pyclustering.utils.color.color</Scope>
    </TokenIdentifier>
    <Path>d3/d13/classpyclustering_1_1utils_1_1color_1_1color.html</Path>
    <Anchor>ae4b71e7c3f86edf2dd4ac08149152499</Anchor>
    <Abstract>Returns color using round robin to avoid out of range exception. </Abstract>
    <DeclaredIn>color.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TITLES</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.color.color</Scope>
    </TokenIdentifier>
    <Path>d3/d13/classpyclustering_1_1utils_1_1color_1_1color.html</Path>
    <Anchor>a1da88547642e17713e82f59d775a0aeb</Anchor>
    <Abstract>List of color titles that are used by pyclustering for visualization. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::graph</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::utils::graph</Scope>
    </TokenIdentifier>
    <Path>d8/d28/namespacepyclustering_1_1utils_1_1graph.html</Path>
    <Abstract>Graph representation (uses format GRPR). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read_graph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::graph</Scope>
    </TokenIdentifier>
    <Path>d8/d28/namespacepyclustering_1_1utils_1_1graph.html</Path>
    <Anchor>a2748ab9fdb1dcb79d0aacb6b8ab83270</Anchor>
    <Abstract>Read graph from file in GRPR format. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>draw_graph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::graph</Scope>
    </TokenIdentifier>
    <Path>d8/d28/namespacepyclustering_1_1utils_1_1graph.html</Path>
    <Anchor>a1d7b7dd98dae41cf8290d13f99187394</Anchor>
    <Abstract>Draw graph. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::graph::graph</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.utils.graph.graph</Scope>
    </TokenIdentifier>
    <Path>da/d7f/classpyclustering_1_1utils_1_1graph_1_1graph.html</Path>
    <Abstract>Graph representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.graph.graph</Scope>
    </TokenIdentifier>
    <Path>da/d7f/classpyclustering_1_1utils_1_1graph_1_1graph.html</Path>
    <Anchor>aee78d906c027f18804a0c3b49cc45be2</Anchor>
    <Abstract>Constructor of graph. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__len__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.graph.graph</Scope>
    </TokenIdentifier>
    <Path>da/d7f/classpyclustering_1_1utils_1_1graph_1_1graph.html</Path>
    <Anchor>a0e457b9d599093f46ef4d151176b3482</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.graph.graph</Scope>
    </TokenIdentifier>
    <Path>da/d7f/classpyclustering_1_1utils_1_1graph_1_1graph.html</Path>
    <Anchor>a9553735e0ad71c9f705cdf803d6a9e79</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>space_description</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.graph.graph</Scope>
    </TokenIdentifier>
    <Path>da/d7f/classpyclustering_1_1utils_1_1graph_1_1graph.html</Path>
    <Anchor>a035719cd0c6f9419f15e9b2a039603c0</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>comments</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.graph.graph</Scope>
    </TokenIdentifier>
    <Path>da/d7f/classpyclustering_1_1utils_1_1graph_1_1graph.html</Path>
    <Anchor>a8c4358dc32b90d3500274ae6a3904c51</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type_graph_descr</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.graph.graph</Scope>
    </TokenIdentifier>
    <Path>da/d7f/classpyclustering_1_1utils_1_1graph_1_1graph.html</Path>
    <Anchor>a32680e84d39b06c086278847a49c662d</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::graph::type_graph_descr</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.utils.graph.type_graph_descr</Scope>
    </TokenIdentifier>
    <Path>dc/dee/classpyclustering_1_1utils_1_1graph_1_1type__graph__descr.html</Path>
    <Abstract>Enumeration of graph description. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GRAPH_UNKNOWN</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.graph.type_graph_descr</Scope>
    </TokenIdentifier>
    <Path>dc/dee/classpyclustering_1_1utils_1_1graph_1_1type__graph__descr.html</Path>
    <Anchor>aa43c56a62a853c482d68d4ff559a4736</Anchor>
    <Abstract>Unknown graph representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GRAPH_MATRIX_DESCR</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.graph.type_graph_descr</Scope>
    </TokenIdentifier>
    <Path>dc/dee/classpyclustering_1_1utils_1_1graph_1_1type__graph__descr.html</Path>
    <Anchor>aba842f400ba0dadd7e413131c67cfe1b</Anchor>
    <Abstract>Matrix graph representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GRAPH_VECTOR_DESCR</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.graph.type_graph_descr</Scope>
    </TokenIdentifier>
    <Path>dc/dee/classpyclustering_1_1utils_1_1graph_1_1type__graph__descr.html</Path>
    <Anchor>a42a94b7933e2061a25f89f270b9f1431</Anchor>
    <Abstract>Vector graph representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::metric</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Abstract>Module provides various distance metrics - abstraction of the notion of distance in a metric space...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>euclidean_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a4f3b908da4073fc6ff57d0d505775843</Anchor>
    <Abstract>Calculate Euclidean distance between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>euclidean_distance_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>af890de58050cc91d5221eef490317776</Anchor>
    <Abstract>Calculate Euclidean distance between two objects using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>euclidean_distance_square</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a93f687775baf556d1bfce4405889f776</Anchor>
    <Abstract>Calculate square Euclidean distance between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>euclidean_distance_square_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a86b4bbf5c90cac4b3d94aad0dc54b3dc</Anchor>
    <Abstract>Calculate square Euclidean distance between two objects using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>manhattan_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>abbe82273802d98805644e8a5763bdc99</Anchor>
    <Abstract>Calculate Manhattan distance between between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>manhattan_distance_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a68e81bb61115d327ef0dc086c74b77c2</Anchor>
    <Abstract>Calculate Manhattan distance between two objects using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chebyshev_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>ac1c3c7513d08494ca69f734c974cc040</Anchor>
    <Abstract>Calculate Chebyshev distance between between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chebyshev_distance_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a6b41b38cb6faf2427d76632c9a444c71</Anchor>
    <Abstract>Calculate Chebyshev distance between two objects using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>minkowski_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a25678d3ef32c0e11e136fdfd8a98543b</Anchor>
    <Abstract>Calculate Minkowski distance between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>minkowski_distance_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a6c53b0a580370d72a7fb457631ce9d7c</Anchor>
    <Abstract>Calculate Minkowski distance between objects using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canberra_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>aa2d9c2fb460b08a51d0cac2531b51700</Anchor>
    <Abstract>Calculate Canberra distance between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canberra_distance_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a64dd5e6105d4ed30ef042743b37680cb</Anchor>
    <Abstract>Calculate Canberra distance between two objects using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chi_square_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a4816671c5e6ebca3b352d3bda7dfc9ad</Anchor>
    <Abstract>Calculate Chi square distance between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chi_square_distance_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>ac02250a200e231d2111d9f410e5e3a36</Anchor>
    <Abstract>Calculate Chi square distance between two vectors using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gower_distance</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a6c2cb438a210f70ee799dc39467a157f</Anchor>
    <Abstract>Calculate Gower distance between two vectors. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gower_distance_numpy</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::metric</Scope>
    </TokenIdentifier>
    <Path>dd/dbc/namespacepyclustering_1_1utils_1_1metric.html</Path>
    <Anchor>a9788bcfa778eafb8ab3965f0332d9077</Anchor>
    <Abstract>Calculate Gower distance between two vectors using numpy. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::metric::distance_metric</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Abstract>Distance metric performs distance calculation between two points in line with encapsulated function...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Anchor>abd93874f2bebb198616535b6602d0612</Anchor>
    <Abstract>Creates distance metric instance for calculation distance between two points. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__call__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Anchor>ac25d594aeda87887b482012ba70904c6</Anchor>
    <Abstract>Calculates distance between two points. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_type</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Anchor>a02510c5f970abccd7551e665755cd3f6</Anchor>
    <Abstract>Return type of distance metric that is used. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_arguments</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Anchor>aa5397e9636baa51f556223b386f4a0d1</Anchor>
    <Abstract>Return additional arguments that are used by distance metric. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_function</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Anchor>ab39796486b0abf1bd5908b5888b673ed</Anchor>
    <Abstract>Return user-defined function for calculation distance metric. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>enable_numpy_usage</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Anchor>aa58efb2fa4cba21a779068b6c05247e1</Anchor>
    <Abstract>Start numpy for distance calculation. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disable_numpy_usage</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>pyclustering.utils.metric.distance_metric</Scope>
    </TokenIdentifier>
    <Path>df/df9/classpyclustering_1_1utils_1_1metric_1_1distance__metric.html</Path>
    <Anchor>a1f56641429768fc68e69976ba8896568</Anchor>
    <Abstract>Stop using numpy for distance calculation. </Abstract>
    <DeclaredIn>metric.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::metric::type_metric</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Abstract>Enumeration of supported metrics in the module for distance calculation between two points...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EUCLIDEAN</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>ada41bdfbf917a3463b48f75c9a6ccae1</Anchor>
    <Abstract>Euclidean distance, for more information see function &amp;#39;euclidean_distance&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EUCLIDEAN_SQUARE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>a5bb1b52ed7937ed102fb2aed46faff01</Anchor>
    <Abstract>Square Euclidean distance, for more information see function &amp;#39;euclidean_distance_square&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MANHATTAN</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>a49a236683bbe19f1771fb16b9f68e144</Anchor>
    <Abstract>Manhattan distance, for more information see function &amp;#39;manhattan_distance&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CHEBYSHEV</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>ad4419ac00c1f1c484f86d0af82bf0164</Anchor>
    <Abstract>Chebyshev distance, for more information see function &amp;#39;chebyshev_distance&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MINKOWSKI</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>ae171ff806e3c12b752530914e0bacfd4</Anchor>
    <Abstract>Minkowski distance, for more information see function &amp;#39;minkowski_distance&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CANBERRA</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>a98e4af29af65e57b6dfbabcbd94c3be7</Anchor>
    <Abstract>Canberra distance, for more information see function &amp;#39;canberra_distance&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CHI_SQUARE</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>ab41270da0f419f1e2f160c0d23a5b663</Anchor>
    <Abstract>Chi square distance, for more information see function &amp;#39;chi_square_distance&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GOWER</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>a95f8770efe9c53a4ca4fe29465171467</Anchor>
    <Abstract>Gower distance, for more information see function &amp;#39;gower_distance&amp;#39;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>USER_DEFINED</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>pyclustering.utils.metric.type_metric</Scope>
    </TokenIdentifier>
    <Path>da/d3a/classpyclustering_1_1utils_1_1metric_1_1type__metric.html</Path>
    <Anchor>ac104afe65efdb9c2115f00e027e4bc54</Anchor>
    <Abstract>User defined function for distance calculation between two points. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pyclustering::utils::sampling</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>pyclustering::utils::sampling</Scope>
    </TokenIdentifier>
    <Path>d9/d83/namespacepyclustering_1_1utils_1_1sampling.html</Path>
    <Abstract>Module provides various random sampling algorithms. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reservoir_r</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::sampling</Scope>
    </TokenIdentifier>
    <Path>d9/d83/namespacepyclustering_1_1utils_1_1sampling.html</Path>
    <Anchor>aff3a6cae5fee74adf6a625012272afcb</Anchor>
    <Abstract>Performs data sampling using Reservoir Algorithm R. </Abstract>
    <DeclaredIn>sampling.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reservoir_x</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>pyclustering::utils::sampling</Scope>
    </TokenIdentifier>
    <Path>d9/d83/namespacepyclustering_1_1utils_1_1sampling.html</Path>
    <Anchor>abf36938886b5bd151fa277a95a9e4e45</Anchor>
    <Abstract>Performs data sampling using Reservoir Algorithm X. </Abstract>
    <DeclaredIn>sampling.py</DeclaredIn>
  </Token>
</Tokens>
